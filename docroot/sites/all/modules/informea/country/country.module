<?php
/**
 * @file
 * Code for the Country feature.
 */

include_once 'country.features.inc';

/**
 *  Implements hook_url_inbound_alter().
 */
function country_url_inbound_alter(&$path, $original_path, $path_language) {
  if($node = country_url_match_node($path)) {
    $path = 'node/' . $node->nid;
  }
}

function country_url_match_node($path) {
  module_load_include('inc', 'country', 'country.api');
  if (arg(0, $path) == 'countries') {
    if ($node = country_load_by_iso2(arg(1, $path))) {
      return $node;
    }
  } else if(strlen(arg(0, $path)) == 2) { // Assume language prefix @todo enhance
    if (arg(1, $path) == 'countries') {
      if ($node = country_load_by_iso2(arg(2, $path))) {
        return $node;
      }
    }
  }
  return FALSE;
}

function country_url_context($path) {
  $path = preg_replace('/([A-Za-z]{2})?\/?countries\/[A-Za-z]{2}\/?/', '', $path);
  $parts = explode('/', $path);
  return $parts[0];
}

function _country_bs_tabs($tabs) {
  $markup = '<div role="tabpanel">';
  $markup .= '<ul class="nav nav-tabs" role="tablist">';

  foreach ($tabs as $id => $tab) {
    $markup .= '<li role="presentation"' . (isset($tab['active']) && $tab['active'] ? ' class="active"' : '') . '><a href="#' . $id . '" aria-controls="' . $id . '" role="tab" data-toggle="tab">' . $tab['title'] . '</a></li>';
  }

  $markup .= '</ul>';
  $markup .= '<div class="tab-content">';

  foreach ($tabs as $id => $tab) {
    $markup .= '<div role="tabpanel" class="tab-pane' . (isset($tab['active']) && $tab['active'] ? ' active' : '') . '" id="' . $id . '">' . $tab['content'] . '</div>';
  }

  $markup .= '</div>';
  $markup .= '</div>';

  return $markup;
}

function country_get_countries() {
  $query = new EntityFieldQuery();
  $result = $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'country')
    ->propertyCondition('status', NODE_PUBLISHED)
    ->fieldOrderBy('title_field', 'value')
    ->execute();

  $countries = array();

  if (!isset($result['node'])) {
    return array();
  }

  $nodes = entity_load('node', array_keys($result['node']));

  foreach ($nodes as $nid => $node) {
    $wrapper = entity_metadata_wrapper('node', $node);

    $countries[$wrapper->field_country_iso2->value()] = $wrapper->title_field->value();
  }

  return $countries;
}

/**
 *  Implements hook_node_view().
 */
function country_node_view($node, $view_mode, $langcode) {
  if($node->type == 'country' && $view_mode == 'full') {
    // Adds the country JavaScript file to the page.
    drupal_add_js(drupal_get_path('module', 'country') . '/js/country.js');

    $context = country_url_context(request_path());
    if(empty($context)) {
      $context = 'map';
    }
    $node->context = $context;
    switch($context) {
      case 'map':
        // Adds the amCharts JavaScript files to the page.
        drupal_add_js('https://maps.googleapis.com/maps/api/js?v=3.exp', 'external');
        // Adds the country JavaScript file to the page.
        drupal_add_js(drupal_get_path('module', 'country') . '/js/map.js');
        $view_ramsar = country_get_view_country_related_content($node->nid, 'ramsar_sites');
        $view_whc = country_get_view_country_related_content($node->nid, 'whc_sites');
        $node->content['context'] = array(
          array(
            '#type' => 'item', '#weight' => 10, '#markup' => _country_bs_tabs(array(
              'tab-map' => array('title' => t('Map of sites'), 'active' => TRUE, 'content' => '<div id="map-canvas" style="height: 400px;margin: 0px;padding: 0px"></div>'),
              'tab-ramsar' => array('title' => t('Ramsar sites <span class="badge">!count</span>', array('!count' => $view_ramsar->total_rows)), 'content' => $view_ramsar->render()),
              'tab-whc' => array('title' => t('WHC sites <span class="badge">!count</span>', array('!count' => $view_whc->total_rows)), 'content' => $view_whc->render()),
            )),
          ),
        );
        break;

      case 'national-reports':
        $view = country_get_view_country_related_content($node->nid, 'embed_national_reports');
        $node->content['context'] = array(
          '#type' => 'item', '#weight' => 10, '#markup' => $view->preview(),
        );
        break;

      case 'action-plans':
        $view = country_get_view_country_related_content($node->nid, 'embed_action_plans');
        $node->content['context'] = array(
          '#type' => 'item', '#weight' => 10, '#markup' => $view->preview(),
        );
        break;

      case 'court-decisions':
        $view = country_get_view_country_related_content($node->nid, 'page_court_decisions');
        $raw_data = country_get_court_decisions_statistics($node->nid);
        $data = array();
        foreach($raw_data as $t) {
          $data[] = (object) array('the_category' => $t->name, 'the_value' =>(int) $t->count);
        }
        $chart_config = edw_amcharts_default_config_chart_column();
        $chart_config->rotate = TRUE;
        $chart_config->dataProvider = $data;
        edw_amcharts_add_chart('country_decisions_chart', 'column', $chart_config, array(), array('width' => '850px', 'height' => '300px'));
        $node->content['context'] = array(
          0 => array(
            '#type' => 'item', '#weight' => 1, '#markup' => '',
            '#id' => 'country_decisions_chart',
          ),
          1 => array(
            '#type' => 'item', '#weight' => 10, '#markup' => $view->render(),
          )
        );
        break;

      case 'legislation':
        module_load_include('inc', 'country', 'country.forms');
        $raw_data = country_get_legislation_statistics($node->nid);
        $data = array();
        foreach($raw_data as $t) {
          $data[] = (object) array(
            'nid' => $node->nid,
            'the_title' => $t->name,
            'the_value' => (int)$t->count,
            'tid' => $t->tid
          );
        }
        $chart_config = edw_amcharts_default_config_chart_pie();
        $chart_config->theme = 'light';
        $chart_config->dataProvider = $data;

        $listeners = array(
          'clickSlice' => <<<EOF
function (event) {
  var params = {
    f: [
      'field_country:' + event.dataItem.dataContext.nid,
      'type:legislation',
      'field_type_of_text:' + event.dataItem.dataContext.tid
    ],
    search_api_views_fulltext_op: 'AND'
  };

  window.location.href = Drupal.settings.basePath + 'search?' + $.param(params);
}
EOF
        );

        edw_amcharts_add_chart('country_legislation_chart', 'pie', $chart_config, $listeners, array('width' => '260px', 'height' => '260px'));
        $filter_form = drupal_get_form('country_legislation_filter_form', $node);
        // Unset form attributes to make keyword filter work.
        unset($filter_form['form_id']);
        unset($filter_form['form_token']);
        unset($filter_form['form_build_id']);
        $node->content['context'] = array(
          0 => array(
            '#type' => 'item', '#weight' => 10, '#markup' => '',
            '#prefix' => '<p></p><h4>Types of legislation</h4>', '#suffix' => '</div>',
            '#id' => 'country_legislation_chart',
          ),
          1 =>$filter_form
        );
        break;

      case 'literature':
        module_load_include('inc', 'country', 'country.forms');
        $raw_data = country_get_court_literature_statistics($node->nid);
        $data = array();
        foreach($raw_data as $t) {
          $data[] = (object) array(
            'nid' => $node->nid,
            'the_category' => $t->name,
            'the_value' => (int) $t->count,
            'tid' => $t->tid
          );
        }
        $chart_config = edw_amcharts_default_config_chart_column();
        $chart_config->rotate = TRUE;
        $chart_config->dataProvider = $data;

        $listeners = array(
          'clickGraphItem' => <<<EOF
function (event) {
  var params = {
    f: [
      'field_country:' + event.item.dataContext.nid,
      'type:literature',
      'field_literature_type:' + event.item.dataContext.tid
    ],
    search_api_views_fulltext_op: 'AND'
  };

  window.location.href = Drupal.settings.basePath + 'search?' + $.param(params);
}
EOF
        );

        edw_amcharts_add_chart('country_literature_chart', 'column', $chart_config, $listeners, array('width' => '800px', 'height' => '350px'));
        $filter_form = drupal_get_form('country_literature_filter_form', $node);
        // Unset form attributes to make keyword filter work.
        unset($filter_form['form_id']);
        unset($filter_form['form_token']);
        unset($filter_form['form_build_id']);
        $node->content['context'] = array(
          0 => array(
            '#type' => 'item', '#weight' => 10, '#markup' => '',
            '#id' => 'country_literature_chart',
          ),
          1 => $filter_form,
        );
        break;
    }
  }
}

/**
 * Implements hook_page_alter().
 */
function country_page_alter(&$page) {
  if (!empty($page['content']['system_main']['nodes'])) {
    foreach ($page['content']['system_main']['nodes'] as $nid => &$node) {
      // Move legislation chart to secondary region
      if (isset($node['#node']->context) && $node['#node']->type == 'country') {
        if (isset( $node['context'] ) && is_array($node['context'])) {
          foreach ($node['context'] as $idx => $item) {
            if (isset( $item['#id'] ) && $item['#id'] == 'country_legislation_chart') {
              $page['sidebar_second'][] = $item;
              unset( $node['context'][0] );
            }
          }
        }
        // Hide fields in some view modes.
        switch ($node['#node']->context) {
          case 'action-plans':
          case 'court-decisions':
          case 'legislation':
          case 'literature':
          case 'map':
          case 'national-reports':
          case 'parties':
            foreach(element_children($node) as $element_id) {
              hide($node[$element_id]);
            }
            show($node['context']);
          }
      }
    }
  }
}

function country_country_contextual_menu_alter(&$contextual_menu, $node) {
  $ret = array();
  if ($node->type == 'country') {
    $uri = url(drupal_get_path_alias('node/' . $node->nid), array('absolute' => TRUE));
    $links = array(
      'map' => t('Map and sites <span class="badge">!count</span>',
        array('!count' => country_get_view_country_related_content_count($node->nid, 'embed_sites'))
      ),
      'parties' => t('Membership <span class="badge">!count</span>', array( '!count' => 0 )),
      'action-plans' => t('Action plans <span class="badge">!count</span>',
        array('!count' => country_get_view_country_related_content_count($node->nid, 'embed_action_plans'))
      ),
      'national-reports' => t('National reports <span class="badge">!count</span>',
        array('!count' => country_get_view_country_related_content_count($node->nid, 'embed_national_reports'))
      ),
      'legislation' => t('Legislation <span class="badge">!count</span>',
        array('!count' => country_get_view_country_related_content_count($node->nid, 'page_legislation'))
      ),
      'literature' => t('Literature <span class="badge">!count</span>',
        array('!count' => country_get_view_country_related_content_count($node->nid, 'page_literature'))
      ),
      'court-decisions' => t('Court decisions <span class="badge">!count</span>',
        array('!count' => country_get_view_country_related_content_count($node->nid, 'page_court_decisions'))
      ),
    );

    foreach($links as $path => $title) {
      $link = array(
        '#type' => 'link',
        '#title' => $title,
        '#href' => $uri . '/' . $path,
        '#attributes' => array( 'class' => array( 'list-group-item' ) ),
        '#options' => array( 'html' => TRUE ),
        '#active' => FALSE,
      );
      if (isset($node->context) && $node->context == $path) {
        $link['#attributes']['class'][] = 'active';
      }
      $contextual_menu[] = $link;
    }

    // Downloads menu item
    $contextual_menu[] = array(
      '#type' => 'link',
      '#title' => t('Downloads'),
      '#href' => '',
      '#attributes' => array('class' => 'list-group-item'),
      '#options' => array('attributes' => array('data-toggle' => 'modal'), 'external' => TRUE, 'fragment' => 'modal-downloads', 'html' => TRUE),
      '#active' => FALSE,
    );
  }
  return $ret;
}


function country_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  if (isset($router_item['page_arguments'][0]->type) && $router_item['page_arguments'][0]->type == 'country') {
    $context_menu = array();
    $node = $router_item['page_arguments'][0];
    drupal_alter('country_contextual_menu', $context_menu, $node);
    $data['tabs'][1] = array(
      'count' => count($context_menu),
      'output' => $context_menu,
    );
  }
}


function country_get_legislation_statistics($id_country = NULL, $type = 'legislation') {
  $query = db_select('node', 'n')
    ->fields('td', array('tid'))
    ->condition('n.status', 1)
    ->condition('n.type', $type)
    ->groupBy('td.tid');

  $query->addExpression('COUNT(td.vid)', 'term_count');
  $query->join('field_data_field_type_of_text', 'tt', 'n.nid = tt.entity_id');
  $query->join('taxonomy_term_data', 'td', 'tt.field_type_of_text_tid = td.tid');
  if ($id_country) {
    $query->join('field_data_field_country', 'c', 'n.nid = c.entity_id');
    $query->condition('c.field_country_target_id', $id_country);
  }
  $results = $query->execute()->fetchAllKeyed();

  arsort($results);
  $ret = array();
  foreach($results as $tid => $count) {
    $term = taxonomy_term_load($tid);
    $term->count = $count;
    $ret[] = $term;
  }
  return $ret;
}


function country_get_court_decisions_statistics($id_country = NULL) {
  return country_get_legislation_statistics($id_country, 'court_decisions');
}

function country_get_court_literature_statistics($id_country = NULL) {
  $query = db_select('node', 'n')
    ->fields('td', array('tid'))
    ->condition('n.status', 1)
    ->condition('n.type', 'literature')
    ->groupBy('td.tid');

  $query->addExpression('COUNT(td.vid)', 'term_count');
  $query->join('field_data_field_literature_type', 'tt', 'n.nid = tt.entity_id');
  $query->join('taxonomy_term_data', 'td', 'tt.field_literature_type_tid = td.tid');
  if ($id_country) {
    $query->join('field_data_field_country', 'c', 'n.nid = c.entity_id');
    $query->condition('c.field_country_target_id', $id_country);
  }
  $results = $query->execute()->fetchAllKeyed();

  arsort($results);
  $ret = array();
  foreach($results as $tid => $count) {
    $term = taxonomy_term_load($tid);
    $term->count = $count;
    $ret[] = $term;
  }
  return $ret;
}

function country_get_by_name($name) {
  $name = strtolower($name);
  $countries = &drupal_static(__FUNCTION__);
  if(empty($countries)) {
    $query = new EntityFieldQuery();
    $result = $query->entityCondition('entity_type', 'node')
        ->entityCondition('bundle', 'country')
        ->execute();
    if (isset($result['node'])) {
      $rows = node_load_multiple(array_keys($result['node']));
      foreach ($rows as $row) {
        $wrapper = entity_metadata_wrapper('node', $row);
        $countries[strtolower($wrapper->label())] = $row;
        $official = $wrapper->field_country_official_name->value();
        if (!empty($official)) {
          $countries[strtolower($official)] = $row;
        }
      }
    }
  }
  if(array_key_exists($name, $countries)) {
    return $countries[$name];
  } else {
    if (array_key_exists($name, $countries)) {
      return $countries[$name];
    }
  }
  return FALSE;
}
