<?php
/**
 * @file
 * Code for the Country feature.
 */

include_once 'country.features.inc';

/**
 *  Implements hook_url_inbound_alter().
 */
function country_url_inbound_alter(&$path, $original_path, $path_language) {

  if($node = country_url_match_node($path)) {
    $path = 'node/' . $node->nid;
  }
}

function country_url_match_node($path) {
  module_load_include('inc', 'country', 'country.api');
  if (arg(0, $path) == 'countries') {
    if ($node = country_load_by_iso2(arg(1, $path))) {
      return $node;
    }
  } else if(strlen(arg(0, $path)) == 2) { // Assume language prefix @todo enhance
    if (arg(1, $path) == 'countries') {
      if ($node = country_load_by_iso2(arg(2, $path))) {
        return $node;
      }
    }
  }
  return FALSE;
}

/**
 * Implements hook_menu().
 */
function country_menu() {
  $items = array();
  $items['admin/config/system/country_batch_update_region/%country_nid'] = array(
    'title' => 'Update region for all nodes',
    'page callback' => 'country_batch_update_region',
    'access arguments' => array('edit any country content'),
    'page arguments' => array('country_nid'),
    'type' => MENU_NORMAL_ITEM,
    'description' => 'Set the region to all nodes.',
  );
  $items['admin/config/system/country_batch_update_region'] = array(
    'title' => 'Update region for all nodes',
    'page callback' => 'country_batch_update_region',
    'access arguments' => array('edit any country content'),
    'type' => MENU_NORMAL_ITEM,
    'description' => 'Set the region to all nodes.',
  );
    $items = array();
  $items['country/add-legislations'] = array(
    'title' => 'Legislation and case laws data collection form',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('country_legislation_collection_form'),
    'access arguments' => array('access content'),
    'description' => 'Legislation Collection form',
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 *  Implements hook_node_view().
 */
function country_node_view($node, $view_mode, $langcode) {
  if($node->type == 'country' && $view_mode == 'full') {
    // Adds the country JavaScript file to the page.
    drupal_add_js(drupal_get_path('module', 'country') . '/js/country.js');

    $context = country_url_context(request_path());
    if(empty($context)) {
      $context = 'map';
    }
    $node->context = $context;
    if ($context != 'summary') {
      foreach(element_children($node->content) as $field_name) {
        hide($node->content[$field_name]);
      }
    }
    $breadcrumbs = array(
      l(t('Parties'), 'countries'),
      l($node->title, 'node/' . $node->nid),
    );
    switch($context) {
      case 'summary':
        $breadcrumbs[] = t('Summary');
        module_load_include('inc', 'country', 'country.undata.inc');
        $rUN = new UNDataOrgParser($node->nid, $node->title_original);
        $node->content['context'] = array(
          '#type' => 'item',
          '#markup' => $rUN->get_environmental_data(),
          '#weight' => 10,
          '#prefix' => '<hr /><div class="un-data">',
          '#suffix' => t('Data provided by <a href=""><span style="color: #41599A; font-size: 1em;">UN</span><span style="color: #F60; font-size: 1em;">data</span></a>') . '</div>',
        );
        break;

        case 'legislation':
        $breadcrumbs[] = t('Legislation');
        $view = country_get_view_country_related_content($node->nid, 'page_legislation');
        $raw_data = country_get_legislation_statistics($node->nid);
        $data = array();
        foreach($raw_data as $t) {
          $data[] = (object) array('the_title' => $t->name, 'the_value' => (int)$t->count);
        }
      //  $chart_config = edw_amcharts_default_config_chart_pie();
      // $chart_config->theme = 'light';
      //  $chart_config->dataProvider = $data;
      //  edw_amcharts_add_chart('country_legislation_chart', 'pie', $chart_config, array(),array('width' => '460px', 'height' => '260px'));
        $node->content['context'] = array(
         // array(
         //     '#type' => 'item', '#weight' => 10, '#prefix' => '<p></p><h4>Types of Legislation</h4>', '#suffix' => '', '#id' => 'country_legislation_chart',
          //),
          array(
            '#type' => 'item', '#weight' => 100, '#markup' => $view->render(),
            )
        );
        break;

      case 'court-decisions':
        $breadcrumbs[] = t('Court decisions');
        $view = country_get_view_country_related_content($node->nid, 'page_court_decisions');
        $raw_data = country_get_court_decisions_statistics($node->nid);
        $data = array();
        foreach($raw_data as $t) {
          $data[] = (object) array('the_category' => $t->name, 'the_value' =>(int) $t->count);
        }
        //$chart_config = edw_amcharts_default_config_chart_column();
        //$chart_config->rotate = TRUE;
        //$chart_config->dataProvider = $data;
        //edw_amcharts_add_chart('country_decisions_chart', 'column', $chart_config, array(), array('width' => '850px', 'height' => '300px'));
        $node->content['context'] = array(
          //array(
          //  '#type' => 'item', '#weight' => 1, '#prefix' => '<p></p><h4>Types of Court Decisions</h4>', '#suffix' => '', '#id' => 'country_decisions_chart',
          //),
          array(
            '#type' => 'item', '#weight' => 10, '#markup' => $view->render(),
          )
        );
        break;

      case 'map':
        $breadcrumbs = array(
          l(t('Parties'), 'countries'),
          $node->title,
        );
        $wrapper = entity_metadata_wrapper('node', $node);
        $latitude = $wrapper->field_latitude->value();
        $longitude = $wrapper->field_longitude->value();
        $zoom = $wrapper->field_zoom->value();
        $has_map = $latitude && $longitude && $zoom;
        $sites = country_get_sites($node->nid);
        $js_sites = array();
        foreach($sites as $site) {
          $js_sites[] = entity_metadata_wrapper('node', $site)->value();
        }
        if ($has_map) {
          drupal_add_js( '//maps.googleapis.com/maps/api/js?v=3.exp', 'external' );
          // Adds the country JavaScript file to the page.
          drupal_add_js( drupal_get_path( 'module', 'country' ) . '/js/map.js' );
          drupal_add_js(
            array(
              'map' => array(
                'latitude'  => $wrapper->field_latitude->value(),
                'longitude' => $wrapper->field_longitude->value(),
                'zoom'      => $wrapper->field_zoom->value(),
                'sites' => $js_sites,
              )
            ),
            array( 'type' => 'setting' )
          );
        }
        $view_ramsar = country_get_view_country_related_content($node->nid, 'ramsar_sites');
        $view_whc = country_get_view_country_related_content($node->nid, 'whc_sites');
        $view_ramsar_content = $view_ramsar->render();
        $view_whc_content = $view_whc->render();

        if (empty($view_ramsar->total_rows)) {
          $c = informea_no_content_available_block();
          $view_ramsar_content = drupal_render($c);
        }
        if (empty($view_whc->total_rows)) {
          $c = informea_no_content_available_block();
          $view_whc_content = drupal_render($c);
        }
        $tabs = array(
          'map' => array(
            'header' => t('Map of sites'),
            'body' => theme('country_map'),
            'active' => $has_map,
          ),
          'ramsar' => array(
            'header' => t('Ramsar sites <span class="badge">!count</span>', array('!count' => $view_ramsar->total_rows)),
            'body' => $view_ramsar_content,
            'active' => !$has_map,
          ),
          'whc' => array(
            'header' => t('WHC sites <span class="badge">!count</span>', array('!count' => $view_whc->total_rows)),
            'body' => $view_whc_content,
          )
        );
        if (!$has_map) {
          unset($tabs['map']);
        }
        $node->content['context'] = array(
          array('#type' => 'item', '#weight' => 10, '#markup' => theme('informea_bootstrap_tabs', array('elements' => $tabs)))
        );
        break;

      case 'national-reports':
        $breadcrumbs[] = t('National reports');
        module_load_include('inc', 'country_deliverable');
        module_load_include('inc', 'country_deliverable', 'country_deliverable.api');
        $rows = country_deliverable_national_reports_group_by_treaty($node->nid);
        if (empty($rows)) {
          $node->content['context'] = informea_no_content_available_block();
          return;
        }
        $node->content['context'] = country_deliverable_render_national_reports($rows, 'national_reports');
        break;

      case 'action-plans':
        $breadcrumbs[] = t('Action plans');
        module_load_include('inc', 'country_deliverable');
        module_load_include('inc', 'country_deliverable', 'country_deliverable.api');
        $rows = country_deliverable_action_plans_group_by_treaty($node->nid);
        if (empty($rows)) {
          $node->content['context'] = informea_no_content_available_block();
          return;
        }
        $node->content['context'] = country_deliverable_render_action_plans($rows, 'action_plans');
        break;

      case 'parties':
        $breadcrumbs[] = t('Party status');
        $rows = array();
        module_load_include('inc', 'country_data', 'country_data.api');
        module_load_include('php', 'informea', 'recaptcha/recaptchalib');
        $parties = country_data_country_get_parties($node->nid);
        foreach ($parties as $party) {
          $wrapper = entity_metadata_wrapper('node', $party);
          $treaty = $wrapper->field_treaty->value()[0];
          if (!$treaty) {
            continue;
          }
          $date1 = $wrapper->field_party_date_1->value();
          $date1 = empty($date1) ? '&nbsp;' : format_date($date1, 'short');
          $date2 = $wrapper->field_party_date_2->value();
          $date2 = empty($date2) ? '&nbsp;' : format_date($date2, 'short');
          $status = $wrapper->field_party_status->value();
          $status_name = '';
          if ($status) {
            $status_name = $status->name;
          }
          $logo = treaty_url_logo($treaty);
          $row = array(
            'data' => array(
              $img = $logo . $wrapper->field_treaty->label(),
              array('data' => $date1, 'class' => 'text-center'),
              array('data' => $date2, 'class' => 'text-center'),
              array('data' => $status_name, 'class' => 'text-center')
            )
          );
          $nfps = country_data_get_treaty_focal_points($node->nid, $treaty->nid);
          if (count($nfps)) {
            $row['data'][] = array(
              'data' => sprintf('<a data-toggle="collapse" href="#nfp-%1$s" aria-expanded="false" aria-controls="nfp-%1$s"><i class="glyphicon glyphicon-user"></i></a>', $treaty->nid),
              'class' => 'text-center'
            );
          } else {
            $row['data'][] = '';
          }
          $rows[] = $row;
          if (count($nfps)) {
            $nfp_data = country_data_render_focal_points($nfps, $treaty);
            $row = array(
              'class' => array('collapse'),
              'data' => array(array('data' => drupal_render($nfp_data), 'colspan' => 4)),
              'id' => array('nfp-' . $treaty->nid)
            );
            $rows[] = $row;
          }
        }
        if (empty($rows)) {
          $node->content['context'] = informea_no_content_available_block();
          return;
        }

        $table = array(
          'attributes' => array('id' => 'table-parties', 'class' => 'table-no-striping table-hover'),
          'header' => array(
            t('Treaty'),
            array('data' => t('Signature'), 'class' => array('text-center')),
            array('data' => t('Ratification'), 'class' => array('text-center')),
            array('data' => t('Status'), 'class' => array('text-center')),
            array('data' => t('Focal points'), 'class' => array('text-center'))
          ),
          'rows' => $rows
        );
        $node->content['context'] = array(
          '#type' => 'item', '#weight' => 10, '#markup' => theme('table', $table)
        );
        break;

      case 'contacts-hub':
        $view = views_get_view('search');
        if (is_object($view)) {
          $wrapper = entity_metadata_wrapper('node', $node);
          $iso2l = $wrapper->field_country_iso2->value();
          $view->set_display('search_contacts_hub_country');
          $view->set_arguments([$node->nid]);
          $view->override_url = 'countries/' . $iso2l . '/' . $context;
          $view->pre_execute();
          $view->execute();
          $node->content['context']['hub'] = [
            '#type' => 'markup',
            '#markup' => $view->render(),
          ];
        }
        break;

      case 'documents':
        $view = views_get_view('search');
        if (is_object($view)) {
          $view->set_display('search_documents_country');
          $view->set_arguments([$node->nid]);
          $view->override_url = 'node/' . $node->nid . '/' . $context;
          $view->pre_execute();
          $view->execute();
          $node->content['context']['country'] = [
            '#type' => 'markup',
            '#markup' => $view->render(),
          ];
        }
        break;

    }
    informea_theme_set_page_breadcrumb($breadcrumbs);
  }
/*  if($node->type == 'country' && $view_mode == 'image_only') {
    if (!empty($node->field_country_iso2[LANGUAGE_NONE][0]['value'])) {
      $node->content['flag'] = [
        '#markup' => theme('image', [
          'path' => drupal_get_path('theme', 'informea_theme') . '/img/flags/flag-' . strtolower($node->field_country_iso2[LANGUAGE_NONE][0]['value']) . '.png',
          'attributes' => ['class' => ['flag']],
        ]),
      ];
    }
  }*/
}

/**
 * Implements hook_page_alter().
 */
function country_page_alter(&$page) {
  if (!empty($page['content']['system_main']['nodes'])) {
    foreach ($page['content']['system_main']['nodes'] as $nid => &$node) {
      // Move legislation chart to secondary region
      if (isset($node['#node']->context) && $node['#node']->type == 'country') {
        if (isset( $node['context'] ) && is_array($node['context'])) {
          foreach ($node['context'] as $idx => $item) {
            if (isset( $item['#id'] ) && $item['#id'] == 'country_legislation_chart') {
            //  $page['content'][] = $item;
             // unset( $node['content'][0] );
            }
          }
        }
        // Hide fields in some view modes.
        switch ($node['#node']->context) {
          case 'action-plans':
          case 'court-decisions':
          case 'legislation':
          case 'literature':
          case 'map':
          case 'national-reports':
          case 'parties':
          case 'contacts-hub':
            foreach(element_children($node) as $element_id) {
              hide($node[$element_id]);
            }
            show($node['context']);
        }
      }
    }
  }
}

function country_country_contextual_menu_alter(&$contextual_menu, $node) {
  if ($node->type == 'country') {
    module_load_include('inc', 'country_data', 'country_data.api');
    $wrapper = entity_metadata_wrapper('node', $node);
    $iso2l = $wrapper->field_country_iso2->value();
    $node_url = url('countries/' . $iso2l, array('absolute' => TRUE));

    $contextual_menu = array(
      '#theme' => 'item_list',
      '#attributes' => array('class' => array('nav', 'nav-pills', 'nav-stacked'))
    );

    $menu_items = array(
      'map' => array(
        'title' => t('Map and sites'),
      ),
      'parties' => array(
        'title' => t('Party status'),
        'count' => country_data_get_member_party_count($node->nid)
      ),
      'action-plans' => array(
        'title' => t('Action plans'),
        'count' => country_get_action_plan_count($node->nid)
      ),
      'national-reports' => array(
        'title' => t('National reports'),
        'count' => country_get_national_report_count($node->nid)
      ),
      'legislation' => array(
        'title' => t('Legislation'),
        'count' => country_get_legislation_count($node->nid)
      ),
      'court-decisions' => array(
        'title' => t('Court Decisions'),
        'count' => country_get_court_decision_count($node->nid)
      ),
      'documents' => array(
        'title' => t('Documents'),
        'count' => country_get_documents_count($node->nid)
      ),
      'contacts-hub' => array(
        'title' => t('Contacts HUB'),
        'count' => country_get_contacts_count($node->nid)
      ),
      'summary' => array(
        'title' => t('Summary'),
      ),
    );

    foreach ($menu_items as $path => $menu_item) {
      $text = isset($menu_item['count'])
        ? sprintf('<span class="badge pull-right">%d</span>%s', $menu_item['count'], $menu_item['title'])
        : $menu_item['title'];

      $list_item = array(
        'data' => l($text, $node_url . '/' . $path, array('html' => TRUE)),
        'role' => 'presentation'
      );

      if (isset($node->context) && $node->context == $path) {
        $list_item['class'][] = 'active';
      }
      if (isset($menu_item['count']) && $menu_item['count'] == 0) {
        $list_item['class'][] = 'disabled';
      }
      $contextual_menu['#items'][] = $list_item;
    }
    $contextual_menu['#items'][] = array(
      'data' => l(
        'View on UNEPLive' . '<span class="glyphicon glyphicon-new-window pull-right"></span>',
        sprintf('http://uneplive.org/country/index/%s', $iso2l),
        array(
          'attributes' => array(
            'target' => '_blank',
            'title' => t('View the available UNEPLive country profile.') . ' ' . t('Opens in a new window'),
          ),
          'html' => TRUE
        )
      ),
      'role' => 'presentation'
    );
  }
}


function country_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  if (isset($router_item['page_arguments'][0]->type) && $router_item['page_arguments'][0]->type == 'country') {
    $context_menu = array();
    $node = $router_item['page_arguments'][0];
    drupal_alter('country_contextual_menu', $context_menu, $node);
    $data['tabs'][1] = array(
      'count' => count($context_menu),
      'output' => $context_menu,
    );
  }
}

function country_get_stats() {
  module_load_include('inc', 'country_data', 'country_data.api');
  $countries = country_get_countries();
  $stats = array();
  foreach ($countries as $country) {
    $iso = $country->field_country_iso2['und'][0]['value'];
    if ($cache = cache_get('country_stats_count_' . $country->nid)) {
      $data = $cache->data;
    } else {
      $data = array(
        'nid' => $country->nid,
        'geographical_site' => country_get_site_count($country->nid),
        'member_party' => country_data_get_member_party_count($country->nid),
        'action_plan' => country_get_action_plan_count($country->nid),
        'national_report' => country_get_national_report_count($country->nid),
      );
      cache_set('country_stats_count_' . $country->nid, $data, 'cache', CACHE_TEMPORARY);
    }
    $stats[$iso] = $data;
  }
  return $stats;
}

/**
 * Implements hook_views_query_alter().
 *
 * Group by nid to avoid duplicates.
 */
function country_views_query_alter(&$view, &$query) {
  if ($view->name == 'country_related_content' && $view->current_display == 'whc_sites') {
    // Group by nid because "$query->distinct = TRUE" doesn't work.
    $query->add_field('node', 'nid', 'node_nid', array('function' => 'groupby'));
    $query->add_groupby('node.nid');
  }
}

/**
 * Implements hook_node_update().
 */
function country_node_update($node) {
  if ($node->type == 'country') {
    $old_regions = $new_regions = array();
    if (!empty($node->original->field_region)) {
      foreach ($node->original->field_region[LANGUAGE_NONE] as $region) {
        $old_regions[] = $region['tid'];
      }
    }
    if (!empty($node->field_region)) {
      foreach ($node->field_region[LANGUAGE_NONE] as $region) {
        $new_regions[] = $region['tid'];
      }
    }
    if (!(array_diff($old_regions, $new_regions) == array_diff($new_regions, $old_regions))) {
      drupal_set_message('Region for country ' . $node->title . ' was changed! ' .
        l('Click here to update the regions for the affected nodes.', '/admin/config/system/country_batch_update_region/' . $node->nid)
        , 'warning');
    }
  }
}

function _country_get_all_nodes_group_by_country($country_nid = NULL) {
  $q = db_select('field_data_field_region', 'a');
  $q->fields('a', array('entity_id', 'field_region_tid', 'delta'));
  $q->condition('a.bundle', 'country');
  if (!empty($country_nid)) {
    $q->condition('a.entity_id', $country_nid);
  }
  $countries = $q->execute()->fetchAll();
  foreach ($countries as $key => $country) {
    $q = db_select('field_data_field_country', 'c');
    $q->fields('c', array('entity_id', 'bundle'));
    // Country for treaties have a different meaning (depositary)
    $q->condition('c.bundle', array('treaty'), 'NOT IN');
    $q->condition('c.field_country_target_id', $country->entity_id);
    $nodes = $q->execute()->fetchAllKeyed();

    /*
     * First delete the current records in field_data_field_region table because
     * of the following scenario:
     *  - Country has 2 regions selected
     *  - User deletes one of them
     */
    try {
      if (!empty($nodes)) {
        db_delete('field_data_field_region')
          ->condition('entity_id', array_keys($nodes), 'IN')
          ->execute();
        search_api_track_item_change('node', array_keys($nodes));
      }
    }
    catch (PDOException $e) {
      if (function_exists('drush_log')) {
        drush_log(dt('ERROR(country nid=@node_id): @error_msg', array('@node_id' => $country->nid, '@error_msg' => $e->getMessage())), 'error');
      }
      else {
        drupal_set_message(t('ERROR(country nid=@node_id): @error_msg', array('@node_id' => $country->nid, '@error_msg' => $e->getMessage())), 'error');
      }
      return array();
    }

    $countries[$key]->nodes = $nodes;
  }
  return $countries;
}

function _country_update_region_by_country($countries = array()) {
  foreach ($countries as $country) {
    if (empty($country->nodes)) {
      continue;
    }
    foreach ($country->nodes as $node_id => $content_type) {
      try {
        db_insert('field_data_field_region')
          ->fields(array(
            'entity_type' => 'node',
            'bundle' => $content_type,
            'deleted' => 0,
            'entity_id' => $node_id,
            'revision_id' => $node_id,
            'language' => LANGUAGE_NONE,
            'delta' => $country->delta,
            'field_region_tid' => $country->field_region_tid,
          ))
          ->execute();
      }
      catch (PDOException $e) {
        if (function_exists('drush_log')) {
          drush_log(dt('ERROR(nid=@node_id): @error_msg', array('@node_id' => $node_id, '@error_msg' => $e->getMessage())), 'error');
        }
        else {
          drupal_set_message(t('ERROR(nid=@node_id): @error_msg', array('@node_id' => $node_id, '@error_msg' => $e->getMessage())), 'error');
        }
      }
    }
    if (function_exists('drush_log')) {
      drush_log(dt('Successfully updated @non nodes for country_id = @cid and region_tid = @rtid.', array(
          '@non' => count($country->nodes),
          '@cid' => $country->nid,
          '@rtid' => $country->field_region_tid,
        )
      ), 'ok');
    }
  }
}

function country_batch_update_region($country_nid = NULL) {
  $max_nodes_per_iteration = 1000;
  $batch = array(
    'operations' => array(),
    'finished' => 'country_batch_update_region_finish',
    'title' => t('Processing update.'),
    'init_message' => t('Update is starting.'),
    'progress_message' => t('Current operation: @current out of @total.'),
    'error_message' => t('Update has encountered an error.'),
  );

  $countries = _country_get_all_nodes_group_by_country($country_nid);

  $progress = 0;
  $max = 0;
  foreach ($countries as $country) {
    $max += count($country->nodes);
  }

  foreach ($countries as $country) {
    $false_country = $country;
    $offset = 0;
    $nodes = $country->nodes;
    while ($offset < count($country->nodes)) {
      $nodes_slice = array_slice($nodes, $offset, $max_nodes_per_iteration, TRUE);
      $false_country->nodes = $nodes_slice;
      $batch['operations'][] = array('country_batch_update_region_process', array($progress, $false_country));
      $offset += $max_nodes_per_iteration;
      $progress += count($country->nodes);
    }
  }

  batch_set($batch);
  batch_process('admin/config'); // page to return to after complete
}

function country_batch_update_region_process($progress, $country, &$context) {
  _country_update_region_by_country(array($country));
  // update message during each run so you know where you are in the process
  $context['message'] = $progress . ' nodes updated.';
}

function country_batch_update_region_finish($success, $results, $operations) {
  if ($success) {
    drupal_set_message('Update is complete');
  }
  else {
    drupal_set_message('An error occurred.', 'error');
  }
}


/**
 * This function gets called in the browser address bar
*/
function country_legislation_collection_form($form, &$form_state) {
  $form['intro'] = [
    '#type' => 'item',
    '#markup' => t('<p>Please use this form to enter custom legislation</p>'),
  ];
  $form['title'] = [
    '#type' => 'textfield',
    '#title' => t('Legislation title'),
    '#required' => TRUE
  ];
  $form['language'] = [
    '#type' => 'select',
    '#title' => t('Language'),
    '#options' => [
      NULL => t('Please select'),
      'en' => t('English'),
      'fr' => t('French'),
      'ru' => t('Russian'),
      'es' => t('Spanish'),
      'ar' => t('Arabic'),
      'zh-hans' => t('Chinese, simplified'),
    ],
    '#select2' => array(),
    '#default_value' => 'en',
  ];
  $form['date_of_text'] = [
    '#type' => 'date_popup',
    '#field_type' => 'date',
    '#description' => 'Date when legislation was published',
    '#title' => t('Legislation date'),
    '#date_label_position' => 'before',
    '#required' => true,
  ];

  $countries = country_get_countries();
  $options = array('' => t('Please select'));
  foreach($countries as $country) {
    $w = entity_metadata_wrapper('node', $country);
    $options[$country->nid] = $w->title_field->value();
  }
  $form['field_country'] = [
    '#type' => 'select',
    '#title' => t('Country'),
    '#options' => $options,
    '#select2' => array(),
  ];

  $vocabulary = taxonomy_vocabulary_machine_name_load('type_of_text');
  $terms = taxonomy_get_tree($vocabulary->vid);
  $options = [NULL => t('Please select')];
  foreach ($terms as $data) {
    $options[$data->tid] = $data->name;
  }
  $form['type_of_text'] = [
    '#type' => 'select',
    '#title' => t('Type of document'),
    '#options' => $options,
    '#select2' => array(),
  ];
  $form['abstract'] = [
    '#type' => 'textarea',
    '#title' => t('Abstract'),
    #resizable = TRUE
  ];
  $form['url'] = [
    '#type' => 'textfield',
    '#title' => t('Link to full text'),
    '#description' => t('Enter the link to an Internet website where document can be found.')
  ];

  $options = array();
  $vocabulary = taxonomy_vocabulary_machine_name_load('thesaurus_informea');
  $terms = taxonomy_get_tree($vocabulary->vid);
  foreach ($terms as $data) {
    $options[$data->tid] = $data->name;
  }
  $form['field_informea_tags'] = [
    '#type' => 'select',
    '#title' => t('Key topics'),
    '#options' => $options,
    '#multiple' => true,
    '#select2' => array(),
  ];
  $form['upload'] = [
    '#type' => 'managed_file',
    '#title' => t('Upload a file'),
    '#description' => t('Only documents in PDF and Word documents are allowed.'),
    '#upload_location' => variable_get('public://legislation/'),
    '#upload_validators' => [
      'file_validate_extensions' => ['pdf doc docx'],
    ],
  ];

  $form['personalinfo']['legislation_author'] = [
    '#type' => 'textfield',
    '#title' => t('Please enter your name'),
  ];
  $form['personalinfo']['email'] = [
    '#type' => 'textfield',
    '#title' => t('Email'),
    '#description' => 'Please enter your email if you would like to be contacted by UNEP regarding your contribution',
    '#maxlength' => 155,
  ];
  $form['captcha'] = [
    '#type' => 'captcha',
    '#description' => t('This question is for testing whether or not you are a human visitor and to prevent automated spam submissions.'),
    '#captcha_type' => 'captcha/Math',
  ];
  $form['contact'] = [
    '#type' => 'item',
    '#markup' => '<p>' . t('If you are having difficulties filling this form, or for other enquieries, please <a href="/contact" target="_blank">contact</a> us.') . '</p>',
    #delta = 10
  ];

  // Provide a submit button
  $form['submit'] = [
    '#type' => 'submit',
    '#value' => t('Submit'),
  ];
  $form['#attached']['css'] = array(drupal_get_path('module', 'country') . '/css/legislation-collection.css');
  return $form;
}

function country_legislation_collection_form_validate($form, &$form_state) {
  # todo
  # if (!valid_email_address($element['#value'])) {
  # form_set_error($element, t('The email address appears to be invalid, please submit a valid E-mail address.'));
  # }
}

function country_legislation_collection_form_submit($form, &$form_state) {
  drupal_set_message(t('Thank you for your contribution, data has been submitted to UNEP for review.'));
  $values = $form_state['values'];
  $author = $values['legislation_author'];
  $email = $values['email'];
  $language = !empty($values['language']) ? $values['language'] : 'en'; // @todo: sanitize
  $sort_date = date('Y-m-d H:i:s', strtotime($values['date_of_text']));
  $node = (object) array(
    'type' => 'legislation',
    'title' => trim($form_state['values']['title']),
    'title_field' => array($language => array(0 => array('value' => trim($values['title'])))),
    'language' => $language,
    'field_sorting_date' => array(LANGUAGE_NONE => array(0 => array('value' => $sort_date))),
    'field_abstract' => array($language => array(0 => array('value' => trim(check_plain($values['abstract']))))),
    'field_informea_tags' => array(LANGUAGE_NONE => array()),
    'field_data_source' => array(LANGUAGE_NONE => array(0 => array('tid' => 815))),
  );
  if (!empty($values['field_informea_tags'])) {
    foreach($values['field_informea_tags'] as $i => $tid) {
      $node->field_informea_tags[LANGUAGE_NONE][$i] = array('tid' => $tid);
    }
  }
  if (!empty($values['upload'])) {
    $node->field_files[$language][] = array('fid' => $values['upload'], 'display' => 1, 'description' => '');
  }
  if (!empty($values['type_of_text'])) {
    $node->field_type_of_text = array(LANGUAGE_NONE => array(0 => array('tid' => $values['type_of_text'])));
  }
  if (!empty($values['url'])) {
    $node->field_url = array($language => array(0 => array('url' => $values['url'])));
  }
  if (!empty($values['field_country'])) {
    $node->field_country = array(LANGUAGE_NONE => array(0 => array('target_id' => $values['field_country'])));
  }
  node_object_prepare($node);
  $node = node_submit($node);
  $node->uid = 0;
  $node->status = 0;
  node_save($node);
  $to = 'iddah.kamau@unep.org';
  #$to = 'cristian.romanescu@gmail.com';
  $params = array('node' => $node, 'author' => $author, 'author_email' => $email);
  drupal_mail('country', 'collect_legislation', $to, 'en', $params, 'no-reply@informea.org');
}

function country_mail($key, &$message, $params) {
  switch ($key) {
    case 'collect_legislation':
      $node = $params['node'];
      $url = url('node/' . $node->nid, array('absolute' => true,));
      $author = !empty($params['author']) ? 'by ' . $params['author'] : 'anonymously';
      $author .= !empty($params['author_email']) ? ' (' . $params['author_email'] . ')' : '';
      $body = <<<EOT
    <p>Greetings,</p>
    <p>A new legislation has been submitted $author via web form and is available for review here: $url.<br />
    It is currently unpublished until you review it and set it to published.</p>
EOT;
      $message['subject'] = '[InforMEA][Legislation] New legislation submitted #' . $node->nid;
      $message['body'][] = $body;
     break;
  }
}

/**
 * Implements hook_form_alter().
 */
function country_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'views_exposed_form') {
    if ($form['#id'] == 'views-exposed-form-country-related-content-page-court-decisions') {
      $view = $form_state['view'];
      $country = !empty($view->args[0]) ? $view->args[0] : NULL;
      $allowed = thesaurus_get_tags_in_use('field_informea_tags', 'court_decisions', $country);
      $options = array('All' => '- ' . t('Any') . ' -');
      foreach ($form['field_informea_tags_tid']['#options'] as $k => $v) {
        if (in_array($k, $allowed)) {
          $options[$k] = $v;
        }
      }
      $form['field_informea_tags_tid']['#options'] = $options;
    }
    if ($form['#id'] == 'views-exposed-form-country-related-content-page-legislation') {
      $view = $form_state['view'];
      $country = !empty($view->args[0]) ? $view->args[0] : NULL;
      $allowed = thesaurus_get_tags_in_use('field_informea_tags', 'legislation', $country);
      $options = array('All' => '- ' . t('Any') . ' -');
      foreach ($form['field_informea_tags_tid']['#options'] as $k => $v) {
        if (in_array($k, $allowed)) {
          $options[$k] = $v;
        }
      }
      $form['field_informea_tags_tid']['#options'] = $options;
    }
  }
}

function country_views_pre_execute(&$view){
  if ($view->name == 'contacts_hubs') {
    $view->build_info['query']->groupBy('node_field_data_field_country.nid');
  }
}


/**
 * Implements hook_field_formatter_info().
 */
function country_field_formatter_info() {

  return array(
    'country_flag' => array(
      'label' => t('Country Flag'),
      'field types' => array('text'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function country_field_formatter_view($entity_type, $entity, $field, $instance, $lang_code, $items, $display) {
  $elements = array();
  switch ($display['type']) {
    case 'country_flag':
      foreach ($items as $delta => $item) {
        $elements[$delta] = array(
          '#markup' => theme('image',
             array(
                'path' => drupal_get_path('theme', 'informea_theme') . '/img/flags/flag-' . strtolower($item['value']) . '.png',
                'attributes' => array('class' => array('flag')),
              )
          )
        );
      }
      break;
    default:
      break;
  }
  return $elements;
}



/**
 * Implements hook_theme().
 *
 * {@inheritdoc}
 */
function country_theme() {
  return array(
    'country_map' => array(
      'render element' => 'element',
      'template' => 'templates/country-map',
      'variables' => array(),
      'path' => drupal_get_path('module', 'country'),
    ),
    'informea_field_formatter_country_flag' => array(
      'variables' => array(
        'element' => NULL,
      ),
    ),
  );
}


function theme_informea_field_formatter_country_flag($variables) {
  if (isset($variables['items'][0]['value']) && !empty($variables['items'][0]['value'])){
    return drupal_get_path('theme', 'informea_theme') . '/img/flags/flag-' . strtolower($variables['items'][0]['value']) . '.png';
  }
}
