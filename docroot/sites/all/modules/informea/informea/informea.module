<?php
/**
 * @file
 * Code for the informea feature.
 */

include_once 'informea.features.inc';

define('INFORMEA_VOC_INFORMEA', 'thesaurus_informea');
define('INFORMEA_VOC_GEG', 'thesaurus_geg');
define('INFORMEA_VOC_IEG', 'thesaurus_ieg');
define('INFORMEA_VOC_GEMET', 'thesaurus_gemet');

/**
 * Implements hook_schema_alter()
 */
function informea_migration_schema_alter(&$schema) {
  $table = 'field_data_title_field';
  $column = 'title_field_value';

  $new_spec = array(
    'type' => 'varchar', 'length' => 2048, 'not null' => TRUE, 'default' => '',
  );
  if (isset($schema[$table])) {
    $schema[$table]['fields'][$column] = $new_spec;
  }
  $table = 'field_revision_title_field';
  if (isset($schema[$table])) {
    $schema[$table]['fields'][$column] = $new_spec;
  }

  $table = 'node';
  $column = 'title';
  if (isset($schema[$table])) {
    $schema[$table]['fields'][$column] = $new_spec;
  }
  $table = 'node_revision';
  if (isset($schema[$table])) {
    $schema[$table]['fields'][$column] = $new_spec;
  }
}

/**
 * Implements hook_block_info().
 */
function informea_block_info() {
  return array(
    'informea_front_page_slider' => array(
      'info' => t('Front page slider'),
      'cache' => DRUPAL_NO_CACHE,
      'weight' => 10,
      'status' => 1,
      'region' => 'front_page_hero',
      'visibility' => BLOCK_VISIBILITY_LISTED,
      'pages' => '<front>',
    )
  );
}

/**
 * Implements hook_block_view().
 */
function informea_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'informea_front_page_slider':
      $block['content'] = informea_theme_slider();

      break;
  }

  return $block;
}

/**
 * Implements hook_block_configure().
 *
 * This hook declares configuration options for blocks provided by this module.
 */
function informea_block_configure($delta = '') {
  $form = array();

  switch ($delta) {
    case 'informea_front_page_slider':
      $form['informea_max_slides_count'] = array(
        '#type' => 'textfield',
        '#title' => t('Maximum number of slides'),
        '#size' => 60,
        '#description' => t('This will limit the maximum number of slides.'),
        '#default_value' => variable_get('informea_max_slides_count', 7),
        '#element_validate' => array('element_validate_integer_positive')
      );

      break;
  }

  return $form;
}

/**
 * Implements hook_block_save().
 *
 * This hook declares how the configured options for a block
 * provided by this module are saved.
 */
function informea_block_save($delta = '', $edit = array()) {
  switch ($delta) {
    case 'informea_front_page_slider':
      variable_set('informea_max_slides_count', $edit['informea_max_slides_count']);

      break;
  }
}

function informea_entity_info_alter(&$entity_info) {
  $entity_info['node']['view modes']['ajax'] = array(
    'custom settings' => TRUE,
    'label' => t('AJAX')
  );
}


function informea_preprocess_node(&$vars) {
  if ($vars['view_mode'] == 'ajax') {
    $vars['theme_hook_suggestions'][] = 'node__ajax';
    $vars['theme_hook_suggestions'][] = 'node__' . $vars['node']->type . '__ajax';
    $vars['theme_hook_suggestions'][] = 'node__' . $vars['node']->nid . '__ajax';
  }
}

/**
 * Implements hook_wysiwyg_editor_settings_alter().
 */
function informea_wysiwyg_editor_settings_alter(&$settings, $context) {
  if ($context['profile']->editor == 'ckeditor') {
    $settings['allowedContent'] = TRUE;
  }
}

/**
 * Defines menu items and page callbacks.
 *
 * @return
 *   An associative array of properties for each path.
 */
function informea_menu() {
  $items['ajax/modal/node/%node'] = array(
    'page callback'     => 'informea_ajax_node_modal',
    'page arguments'    => array(3),
    'type'              => MENU_CALLBACK,
    'access arguments'  => array('access content'),
  );
  return $items;
}

function informea_feeds_presave(FeedsSource $source, $entity, $item) {
  if (!empty($source->feed_nid)) {
    $w = entity_metadata_wrapper('node', $source->feed_nid);
    $image = $w->field_image->value();
    $entity->field_image[LANGUAGE_NONE][0] = $image;

    // treaties
    $treaties = $w->field_treaty->value();
    if (!empty($treaties)) {
      $nids = array();
      foreach($treaties as $ob) {
        $nids[] = array('target_id' => $ob->nid);
      }
      $entity->field_treaty[LANGUAGE_NONE] = $nids;
    }

    // topics
    $topics = $w->field_mea_topic->value();
    if (!empty($topics)) {
      $nids = array();
      foreach($topics as $ob) {
        $nids[] = array('tid' => $ob->tid);
      }
      $entity->field_mea_topic[LANGUAGE_NONE] = $nids;
    }
  }

}


function informea_ajax_node_modal($node) {
  $arr = node_view($node, 'ajax');
  $html = drupal_render($arr);
  print <<<EOT
<div class="modal-header">
  <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
  <h4 class="modal-title" id="modal-decision-label">{$node->title}</h4>
</div><!-- .modal-header -->
<div class="modal-body">$html</div><!-- .modal-body -->
<div class="modal-footer">
  <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
</div><!-- .modal-footer -->
EOT;
  drupal_exit();
}


/**
 * Configure Entity translation to handle nodes and taxonomy terms.
 */
function informea_configure_entity_translation_types() {
  variable_set(
    'entity_translation_entity_types',
    array(
      'node' => 'node',
      'taxonomy_term' => 'taxonomy_term',
      'comment' => 0,
      'user' => 0,
    )
  );
}

/**
 * Implements hook_date_formats().
 */
function informea_date_formats() {
  variable_set('date_format_short', 'j M Y');
  variable_set('date_format_medium', 'd M Y - H:i');
  variable_set('date_format_long', 'D, d F Y - H:i');
  return array(
    array(
      'type' => 'short',
      'format' => 'j M Y',
      'locales' => array(),
    ),
    array(
      'type' => 'medium',
      'format' => 'd M Y - H:i',
      'locales' => array(),
    ),
    array(
      'type' => 'long',
      'format' => 'D, d F Y - H:i',
      'locales' => array(),
    ),
  );
}

/**
 * Implements hook_library().
 */
function informea_library() {
  $smallipop_path = libraries_get_path('smallipop');
  return array(
    'smallipop' => array(
      'title' => 'Smallipop',
      'website' => 'http://projects.sebastianhelzle.net/jquery.smallipop/index.html',
      'version' => '0.6.2',
      'js' => array(
        $smallipop_path . '/lib/jquery.smallipop.min.js' => array(),
        $smallipop_path . '/lib/contrib/modernizr.js' => array()
      ),
      'css' => array(
        $smallipop_path . '/css/jquery.smallipop.min.css' => array()
      )
    ),
    'scrollto' => array(
      'title' => 'jquery.scrollTo',
      'website' => 'https://github.com/flesler/jquery.scrollTo',
      'version' => '1.4.14',
      'js' => array(
        libraries_get_path('scrollto') . '/jquery.scrollTo.min.js' => array()
      )
    ),
  );
}

class MigrationUtil {

    /**
     * Transform custom escapes like <@#&> and <&#@> in HTML text.
     *
     * @param string $text
     *   Text to process
     *
     * @return string
     *     Decoded text
     */
    public static function decodeHTMLText($text) {
        $search  = array('<@#&>', '<&#@>');
        $replace = array('"', ',');
        $ret = str_replace($search, $replace, $text);
        $ret = html_entity_decode($ret);
        return $ret;
    }


    public static function setTranslation(&$translation_handler, $entity, $row, $language) {
        /* Don't translate en (default) */
        if ($language != $entity->language
            && !isset($entity->translations->data[$language])) {
            $translation_handler->setTranslation(array(
                'translate' => 0, 'status' => 1, 'uid' => 1,
                'language' => $language,
                'source' => $entity->language,
            ));
        }
    }

  public static function getOrCreateTerm($name, $vocabulary_name, $language = LANGUAGE_NONE) {
    if ($t = taxonomy_get_term_by_name($name, $vocabulary_name)) {
      return current($t);
    }
    else {
      if ($voc = taxonomy_vocabulary_machine_name_load($vocabulary_name)) {
        $term = (object) array(
          'name' => $name,
          'vid' => $voc->vid,
          'language' => $language,
          'vocabulary_machine_name' => $vocabulary_name,
          'tid' => NULL,
        );
        taxonomy_term_save($term);
        return $term;
      }
    }
    return FALSE;
  }
}

/**
 * Implements hook_i18n_string_helper_strings().
 */
function informea_i18n_string_helper_strings() {
  module_load_include('inc', 'informea', 'informea.translation');
  return _informea_localizable_strings();
}

function informea_fix_title_field() {
  drupal_set_message('Changing the size of title_field value');
  $column_size = 2048;
  db_change_field('field_data_title_field', 'title_field_value', 'title_field_value', array('type' => 'varchar','length' => $column_size));
  db_change_field('field_revision_title_field', 'title_field_value', 'title_field_value', array('type' => 'varchar','length' => $column_size));
}


function informea_no_content_available_block() {
  // Render "No data available (shown from code)" block
  $block = module_invoke('block', 'block_view', 5);
  return array('#type' => 'item', '#markup' => render($block['content']));
}

/**
 * Return http / https depending on the request
 */
function informea_get_request_protocol() {
  if (!empty($_SERVER['REQUEST_SCHEME']) && $_SERVER['REQUEST_SCHEME'] == 'https') {
    return 'https';
  }
  if (!empty($_SERVER['HTTPS']) && (strtolower($_SERVER['HTTPS']) == 'on' || $_SERVER['HTTPS'] == 1)) {
    return 'https';
  }
  // CloudFlare
  if (!empty($_SERVER['X-Forwarded-Proto']) && strtolower($_SERVER['X-Forwarded-Proto']) == 'https') {
    return 'https';
  }
  // M$ stuff
  if (!empty($_SERVER['Front-End-Https']) && strtolower($_SERVER['Front-End-Https']) == 'on') {
    return 'https';
  }
  // Unreliable when crazy dude serves HTTP over 443 :-/
  if (!empty($_SERVER['SERVER_PORT']) && $_SERVER['SERVER_PORT'] == 443) {
    return 'https';
  }
  return 'http';
}