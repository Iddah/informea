<?php
/**
 * @file
 * Code for the informea feature.
 */

include_once 'informea.features.inc';

define('INFORMEA_VOC_INFORMEA', 'thesaurus_informea');
define('INFORMEA_VOC_GEG', 'thesaurus_geg');
define('INFORMEA_VOC_IEG', 'thesaurus_ieg');
define('INFORMEA_VOC_GEMET', 'thesaurus_gemet');

/**
 * Implements hook_schema_alter()
 */
function informea_migration_schema_alter(&$schema) {
  $table = 'field_data_title_field';
  $column = 'title_field_value';

  $new_spec = array(
    'type' => 'varchar', 'length' => 2048, 'not null' => TRUE, 'default' => '',
  );
  if (isset($schema[$table])) {
    $schema[$table]['fields'][$column] = $new_spec;
  }
  $table = 'field_revision_title_field';
  if (isset($schema[$table])) {
    $schema[$table]['fields'][$column] = $new_spec;
  }

  $table = 'node';
  $column = 'title';
  if (isset($schema[$table])) {
    $schema[$table]['fields'][$column] = $new_spec;
  }
  $table = 'node_revision';
  if (isset($schema[$table])) {
    $schema[$table]['fields'][$column] = $new_spec;
  }
}


/**
 * Configure Entity translation to handle nodes and taxonomy terms.
 */
function informea_configure_entity_translation_types() {
  variable_set(
    'entity_translation_entity_types',
    array(
      'node' => 'node',
      'taxonomy_term' => 'taxonomy_term',
      'comment' => 0,
      'user' => 0,
    )
  );
}

/**
 * Implements hook_date_formats().
 */
function informea_date_formats() {
  variable_set('date_format_short', 'j M Y');
  variable_set('date_format_medium', 'd M Y - H:i');
  variable_set('date_format_long', 'D, d F Y - H:i');
  return array(
    array(
      'type' => 'short',
      'format' => 'j M Y',
      'locales' => array(),
    ),
    array(
      'type' => 'medium',
      'format' => 'd M Y - H:i',
      'locales' => array(),
    ),
    array(
      'type' => 'long',
      'format' => 'D, d F Y - H:i',
      'locales' => array(),
    ),
  );
}


class MigrationUtil {

    /**
     * Transform custom escapes like <@#&> and <&#@> in HTML text.
     *
     * @param string $text
     *   Text to process
     *
     * @return string
     *     Decoded text
     */
    public static function decodeHTMLText($text) {
        $search  = array('<@#&>', '<&#@>');
        $replace = array('"', ',');
        $ret = str_replace($search, $replace, $text);
        $ret = html_entity_decode($ret);
        return $ret;
    }


    public static function setTranslation(&$translation_handler, $entity, $row, $language) {
        /* Don't translate en (default) */
        if ($language != $entity->language
            && !isset($entity->translations->data[$language])) {
            $translation_handler->setTranslation(array(
                'translate' => 0, 'status' => 1, 'uid' => 1,
                'language' => $language,
                'source' => $entity->language,
            ));
        }
    }

  public static function getOrCreateTerm($name, $vocabulary_name, $language = LANGUAGE_NONE) {
    if ($t = taxonomy_get_term_by_name($name, $vocabulary_name)) {
      return current($t);
    }
    else {
      if ($voc = taxonomy_vocabulary_machine_name_load($vocabulary_name)) {
        $term = (object) array(
          'name' => $name,
          'vid' => $voc->vid,
          'language' => $language,
          'vocabulary_machine_name' => $vocabulary_name,
          'tid' => NULL,
        );
        taxonomy_term_save($term);
        return $term;
      }
    }
    return FALSE;
  }
}