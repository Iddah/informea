<?php

/**
 * Implements hook_theme().
 */
function search_api_ion_range_slider_theme() {
  $themes = array(
    'search_api_ion_range_slider_slider' => array(
      'variables' => array('slider' => ''),
      'file' => 'search_api_ion_range_slider.theme.inc',
    ),
    'search_api_ion_range_slider_block_slider_view_form' => array(
      'template' => 'search-api-ion-range-slider-block-slider-view-form',
      'render element' => 'form',
    ),
  );
  return $themes;
}

/**
 * Implements hook_facetapi_widgets().
 */
function search_api_ion_range_slider_facetapi_widgets() {
  return array(
    'search_api_ion_range_slider_ui_slider' => array(
      'handler' => array(
        'label' => t('Ion Ranges: Min/Max UI Slider'),
        'class' => 'SearchApiIonRangeSliderWidgetUISlider',
        'query types' => array('term'),
      ),
    ),
  );
}

/**
 * Implements hook_forms().
 */
function search_api_ion_range_slider_forms($form_id, $args) {
  // Map all form IDs starting with search_api_ion_range_slider_block_slider_view_form
  // to our callback.
  if (strpos($form_id, 'search_api_ion_range_slider_block_slider_view_form') === 0) {
    $forms[$form_id] = array(
      'callback' => 'search_api_ion_range_slider_block_slider_view_form',
    );
    return $forms;
  }
}

/**
 * Generates the jQuery range slider form for range facet blocks.
 *
 * @see search_api_ion_range_slider_forms()
 */
 function search_api_ion_range_slider_block_slider_view_form($form, &$form_state, $variables) {
   $form = array();

   // For compatibility with Search API ajax,
   // we generate the 'ajax target URL' as a hidden field.
   $params = drupal_get_query_parameters($_GET, array('q'));
   foreach ($variables['active_items'] as $key => $active_item) {
     if ($active_item['field alias'] == $variables['range_field']) {
       $pos = $active_item['pos'];
       unset($params['f'][$pos]);
     }
   }

   // Get path or facetapi_pretty_paths.
   $path = $variables['target'];
   if (module_exists('facetapi_pretty_paths')) {
     $path = request_path();
     unset($_GET['f']);
   }

   $form['text-range'] = array(
     '#markup' => '<p class="text-range">'
       . t(
         '!field_name ranges from !prefix_' . $variables['range_field']
         . '@from!suffix_' . $variables['range_field'] . ' to !prefix_'
         . $variables['range_field'] . '@to!suffix_' . $variables['range_field'],
         array(
           '!field_name' => t($variables['name']),
           '@from' => number_format($variables['min'], 0),
           '@to' => number_format($variables['max'], 0),
           '!prefix_' . $variables['range_field'] => $variables['prefix'],
           '!suffix_' . $variables['range_field'] => $variables['suffix'],
          )
       ) . '</p>',
     );
   $form['range-from'] = array(
     '#type' => 'textfield',
     '#title' => t('From'),
     '#size' => 10,
     '#default_value' => $variables['from'],
   );
   $form['range-slider'] = array('#markup' => '<div class="range-slider"></div>');
   $form['range-to'] = array(
     '#type' => 'textfield',
     '#title' => t('To'),
     '#size' => 10,
     '#default_value' => $variables['to'],
   );
   $form['range-min'] = array(
     '#type' => 'hidden',
     '#value' => $variables['min'],
   );
   $form['range-max'] = array(
     '#type' => 'hidden',
     '#value' => $variables['max'],
   );
   $form['path'] = array(
     '#type' => 'hidden',
     '#value' => $path,
   );
   $form['range-field'] = array(
     '#type' => 'hidden',
     '#value' => $variables['range_field'],
   );
   if ($variables['auto_submit_delay']) {
     $form['delay'] = array(
       '#type' => 'hidden',
       '#value' => $variables['auto_submit_delay'],
     );
   }
   $form['submit'] = array(
     '#type' => 'submit',
     '#value' => t('Go'),
   );

   return $form;
 }

/**
 * Handle slider block submit
 */
function search_api_ion_range_slider_block_slider_view_form_submit($form, &$form_state) {
  $values = $form_state['values'];
  $range_field = $form_state['input']['range-field'];

  // Prepare params and existing filter $pos (if any)
  $params = drupal_get_query_parameters($_GET, array('q', 'page'));

  // Get pretty path path and goto()
  if (drupal_multilingual() && variable_get('locale_language_negotiation_url_part') == LOCALE_LANGUAGE_NEGOTIATION_URL_PREFIX) {
    list($language, $path) = language_url_split_prefix(request_path(), language_list());
    $language = $language ? $language : NULL;
  }
  else {
    $path = request_path();
    $language = NULL;
  }
  if (module_exists('facetapi_pretty_paths')) {
    $exists = FALSE;
    $split_path = explode('/', $path);
    foreach ($split_path as $key => $value) {
      if (!($key % 2) && $value == $range_field) {
        $exists = $split_path[$key + 1];
      }
    }

    // Decision: replace existing range or add new
    $new_range = '[' . $values['range-from'] . ' TO ' . $values['range-to'] . ']';
    if ($exists) {
      $path = str_replace($exists, $new_range, $path);
    }
    else {
      $path .= '/' . $range_field . '/' . $new_range;
    }

    // Unset non-pretty query
    unset($params['f']);
  }
  else {
    // Not pretty path logic
    $query = $range_field . ':' . '[' . $values['range-from'] . ' TO ' . $values['range-to'] . ']';

    $pos = -1;
    if (isset($params['f'])) {
      foreach ($params['f'] as $key => $param) {
        if (strpos($param, $range_field . ':') !== FALSE) {
          $pos = $key;
        }
      }
    }

    if ($pos != -1) {
      $params['f'][$pos] = $query;
    }
    else {
      $params['f'][] = $query;
    }
  }

  drupal_goto($path, array('query' => array($params), 'language' => $language));
}
