<?php
/**
 * @file
 * Code for the treaty feature.
 */

include_once 'treaty.features.inc';

/**
 * Defines menu items and page callbacks.
 *
 * @return
 *   An associative array of properties for each path.
 */
function treaty_menu() {
  $items['treaties'] = array(
    'title' => t('Treaties'),
    'page callback' => 'treaty_view',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 *  Implements hook_url_inbound_alter().
 */
function treaty_url_inbound_alter(&$path, $original_path, $path_language) {
  module_load_include('inc', 'treaty', 'treaty.api');
  if($node = treaty_url_match_node($path)) {
    $path = 'node/' . $node->nid;
  }
}

/**
 * Implement hook_theme().
 *
 * {@inheritdoc}
 */
function treaty_theme() {
  return array(
    'treaty_text' => array(
      'render element' => 'element',
      'template' => 'templates/treaty-text',
      'variables' => array('articles', 'node'),
      'path' => drupal_get_path('module', 'treaty'),
    ),
    'treaty_print' => array(
      'render element' => 'element',
      'template' => 'templates/treaty-print',
      'variables' => array('articles', 'node'),
      'path' => drupal_get_path('module', 'treaty'),
    ),
    'treaty_text_article' => array(
      'render element' => 'element',
      'template' => 'templates/treaty-text-article',
      'variables' => array('article'),
      'path' => drupal_get_path('module', 'treaty'),
    ),
    'treaty_text_paragraph' => array(
      'render element' => 'element',
      'template' => 'templates/treaty-text-paragraph',
      'variables' => array('paragraph', 'article'),
      'path' => drupal_get_path('module', 'treaty'),
    ),
    'treaty_text_tags' => array(
      'render element' => 'element',
      'template' => 'templates/treaty-text-tags',
      'variables' => array('tags'),
      'path' => drupal_get_path('module', 'treaty'),
    ),
    'treaty_decisions' => array(
      'render element' => 'element',
      'template' => 'templates/treaty-decisions',
      'variables' => array('decisions'),
      'path' => drupal_get_path('module', 'treaty'),
    ),
    'treaty_protocols' => array(
      'render element' => 'element',
      'template' => 'templates/treaty-protocols',
      'variables' => array('protocols'),
      'path' => drupal_get_path('module', 'treaty'),
    ),
    'treaties' => array(
      'render element' => 'element',
      'template' => 'templates/treaties',
      'variables' => array('regions', 'treaties'),
      'path' => drupal_get_path('theme', 'informea_theme'),
    )
  );
}

/**
 * Implements hook_node_view().
 */
function treaty_node_view($node, $view_mode, $langcode) {
  if($node->type == 'treaty' && $view_mode == 'full') {
    // Adds the country JavaScript file to the page.
    drupal_add_js(drupal_get_path('module', 'treaty') . '/js/treaty.js');
    $context = treaty_url_context(request_path());
    if (empty($context)) {
      $context = 'text';
    }
    $odata_identifier = treaty_get_odata_identifier($node);
    $informea_url = 'http://www.informea.org/treaties/' . $odata_identifier;
      // $is_ecolex = $wrapper-> ...
    $node->context = $context;
    if ($context != 'summary') {
      foreach(element_children($node->content) as $field_name) {
        hide($node->content[$field_name]);
      }
    }
    switch ($context) {
      case 'summary':
        break;

      case 'text':
        drupal_add_library('informea', 'scrollto');
        drupal_add_library('informea', 'smallipop');
        drupal_add_css(drupal_get_path('module', 'treaty') . '/styles/treaty.css');
        $articles = treaty_get_treaty_text($node->nid);
        $node->content['context'] = array(
          '#type' => 'item', '#weight' => 10, '#markup' => theme('treaty_text', array('articles' => $articles, 'node' => $node)),
        );
        break;

      case 'print':
        $articles = treaty_get_treaty_text($node->nid);
        echo theme('treaty_print', array('treaty' => $node, 'articles' => $articles));
        drupal_exit();

        break;

      case 'protocols':
        module_load_include('inc', 'treaty', 'treaty.api');
        $data = treaty_get_child_protocols($node->nid);
        $node->content['context'] = array(
          '#type' => 'item', '#weight' => 10, '#markup' => theme('treaty_protocols', array('protocols' => $data)),
        );
        break;

      case 'decisions':
        module_load_include('inc', 'decision', 'decision.api');
        $data = decision_get_treaty_decisions_group_by_meeting($node->nid);
        if ($odata_identifier != 'cites') {
          $elements = array();
          foreach ($data as $id => $row) {
            $rw = entity_metadata_wrapper('node', $row);
            $elements[$id] = array(
              'header' => $rw->label() . treaty_format_meeting_description($row),
              'body' => theme('treaty_decisions', array('decisions' => $row->decisions)),
            );
          }
          $node->content['context'] = array(
            '#markup' => theme('informea_bootstrap_collapse', array(
                'elements' => $elements,
                'id' => 'accordion',
                'no-data-parent' => TRUE,
                'no-panel-body' => TRUE
              )),
            '#type' => 'item',
            '#weight' => 10
          );
        }
        else {
          $tabs = array(
            'decisions' => array(
              'header' => t('Decisions'),
              'body' => theme('treaty_decisions', array('decisions' => $data['decisions'])),
              'active' => TRUE,
            ),
            'resolutions' => array(
              'header' => t('Resolutions'),
              'body' => theme('treaty_decisions', array('decisions' => $data['resolutions'])),
            )
          );
          $node->content['context'] = array(
            array('#type' => 'item', '#weight' => 10, '#markup' => theme('informea_bootstrap_tabs', array('elements' => $tabs)))
          );
        }
        break;

      case 'parties':
        module_load_include('inc', 'country_data', 'country_data.api');
        module_load_include('php', 'informea', 'recaptcha/recaptchalib');
        $members = country_data_treaty_get_membership($node->nid);
        if (count($members)) {
          // Add map with parties
          $map_config = array();
          foreach ($members as $party) {
            $w = entity_metadata_wrapper('node', $party);
            $obs = $w->field_country->value();
            $country = $obs[0];
            $cw = entity_metadata_wrapper('node', $country);
            $map_config[] = array('id' => $cw->field_country_iso2->value());
          }
          edw_amcharts_add_map('high');
          drupal_add_js(array('map' => array('memberParties' => $map_config)), array('type' => 'setting'));
          drupal_add_js(drupal_get_path('module', 'treaty') . '/js/parties.js');
          $elements = array(
            '#type' => 'item',
            '#markup' => '<div id="ammap_div" style="width: 100%; height: 500px;"></div>' . '<p>' . t('The designations employed and the presentation of material on this map do not imply the expression of any opinion whatsoever on the part of the United Nations concerning the legal status of any country, territory, city or area or of its authorities, or concerning the delimitation of its frontiers or boundaries.') . '</p>',
          );
          $map_tab = array(
            'header' => t('Map of member parties'),
            'body' => drupal_render($elements),
            'active' => TRUE
          );
          // Table with parties
          $rows = array();
          foreach ($members as $member) {
            $wrapper = entity_metadata_wrapper('node', $member);
            $country = $wrapper->field_country->value()[0];
            $c_wrapper = entity_metadata_wrapper('node', $country);
            $themedir = drupal_get_path('theme', 'informea_theme');
            $flag = theme('image', array(
              'path' => $themedir . '/img/flags/flag-' . strtolower($c_wrapper->field_country_iso2->value()) . '.png',
              'attributes' => array('class' => 'img-thumbnail flag-small')
            ));
            $date1 = $wrapper->field_party_date_1->value();
            $date1 = empty($date1) ? '&nbsp;' : format_date($date1, 'short');
            $date2 = $wrapper->field_party_date_2->value();
            $date2 = empty($date2) ? '&nbsp;' : format_date($date2, 'short');
            $status_label = '';
            if ($status = $wrapper->field_party_status->value()) {
              $status_label = $status->name;
            }
            $row = array(
              'data' => array(
                sprintf('%s <span>%s</span>', $flag, $wrapper->field_country->label()),
                array('data' => $date1, 'class' => 'text-center'),
                array('data' => $date2, 'class' => 'text-center'),
                array('data' => $status_label, 'class' => 'text-center')
              )
            );
            $nfps = country_data_get_treaty_focal_points($country->nid, $node->nid);
            if (count($nfps)) {
              $row['data'][] = array(
                'data' => sprintf('<a data-toggle="collapse" href="#nfp-%1$s" aria-expanded="false" aria-controls="nfp-%1$s"><i class="glyphicon glyphicon-user"></i></a>', $country->nid),
                'class' => 'text-center'
              );
            }
            else {
              $row['data'][] = '';
            }
            $rows[] = $row;
            if (count($nfps)) {
              $nfp_data = country_data_render_focal_points($nfps);
              $row = array(
                'class' => array('collapse'),
                'data' => array(
                  array(
                    'data' => drupal_render($nfp_data),
                    'colspan' => 5
                  )
                ),
                'id' => array('nfp-' . $country->nid)
              );
              $rows[] = $row;
            }
          }
          $table = array(
            'attributes' => array(
              'id' => 'table-parties',
              'class' => 'table-no-striping'
            ),
            'header' => array(
              t('Country'),
              array('data' => t('Signature'), 'class' => array('text-center')),
              array('data' => t('Ratification'), 'class' => array('text-center')),
              array('data' => t('Status'), 'class' => array('text-center')),
              array('data' => t('Focal points'), 'class' => array('text-center'))
            ),
            'rows' => $rows
          );
          $elements = array(
            '#type' => 'item',
            '#weight' => 10,
            '#markup' => theme('table', $table)
          );
          $parties_tab = array(
            'header' => t('List of member parties'),
            'body' => drupal_render($elements),
          );
          $node->content['context'] = array(
            array(
              '#type' => 'item',
              '#weight' => 10,
              '#markup' => theme('informea_bootstrap_tabs', array(
                'elements' => array(
                  $map_tab,
                  $parties_tab
                )
              ))
            )
          );
        }
        break;
      case 'national-reports':
        module_load_include('inc', 'country_deliverable', 'country_deliverable.api');
        module_load_include('inc', 'country_deliverable');
        $render = array();
        // Reporting obligations
        $rod = country_deliverable_get_reporting_obligation_cycles($node->nid);
        $rod_rendered = country_deliverable_render_rod($node->nid, $rod);
        if (!empty($rod_rendered)) {
          $render[] = $rod_rendered;
        }
        // National reports
        $rows = country_deliverable_national_reports_group_by_country($node->nid);
        if (!empty($rows)) {
          if (!empty($rod)) {
            $render[] = array(
              '#type' => 'item',
              '#weight' => 5,
              '#markup' => t('National reports'),
              '#prefix' => '<h2>',
              '#suffix' => '</h2>'
            );
          }
          $render[] = country_deliverable_render_national_reports($rows);
        }
        $node->content['context'] = $render;
        break;

      case 'action-plans':
        module_load_include('inc', 'country_deliverable', 'country_deliverable.api');
        module_load_include('inc', 'country_deliverable');
        $rows = country_deliverable_action_plans_group_by_country($node->nid);
        $node->content['context'] = country_deliverable_render_action_plans($rows);
        break;
    }
  }
}

/**
 * Implements hook_page_alter().
 */
function treaty_page_alter(&$page) {
  if (!empty($page['content']['system_main']['nodes'])) {
    foreach ($page['content']['system_main']['nodes'] as $nid => &$node) {
      // Move legislation chart to secondary region
      if (isset($node['#node']->context) && $node['#node']->type == 'treaty') {
        // Hide fields in some view modes.
        foreach(element_children($node) as $element_id) {
          hide($node[$element_id]);
        }
        switch ($node['#node']->context) {
          case 'summary':
          case 'text':
          case 'protocols':
          case 'decisions':
          case 'parties':
          case 'national-reports':
          case 'action-plans':
            show($node['context']);
        }
      }
    }
  }
}

function treaty_treaty_contextual_menu_alter(&$contextual_menu, $node) {
  if ($node->type == 'treaty') {
    module_load_include('inc', 'country_deliverable', 'country_deliverable.api');
    module_load_include('inc', 'country_data', 'country_data.api');
    module_load_include('inc', 'decision', 'decision.api');
    module_load_include('inc', 'treaty', 'treaty.api');

    $node_url = url(drupal_get_path_alias('node/' . $node->nid), array('absolute' => TRUE));
    $wrapper = entity_metadata_wrapper('node', $node);

    $contextual_menu = array(
      '#theme' => 'item_list',
      '#attributes' => array('class' => array('nav', 'nav-pills', 'nav-stacked'))
    );

    $menu_items = array(
      'summary' => array(
        'title' => t('Summary')
      ),
      'protocols' => array(
        'title' => t('Protocols'),
        'count' => treaty_count_child_protocols($node->nid)
      ),
      'text' => array(
        'title' => t('Treaty text')
      ),
      'decisions' => array(
        'title' => t('Decisions'),
        'count' => decision_count_treaty_decisions($node->nid)
      ),
      'parties' => array(
        'title' => t('Parties &amp; contact points'),
        'count' => country_data_treaty_count_membership($node->nid)
      ),
      'national-reports' => array(
        'title' => t('National reports'),
        'count' => country_deliverable_count_treaty_national_reports($node->nid)
      ),
      'action-plans' => array(
        'title' => t('National plans'),
        'count' => country_deliverable_count_treaty_action_plans($node->nid)
      )
    );
    if ($course_url = $wrapper->field_online_course_link->value()) {
      $menu_items['course'] = array(
        'title' => t('<span class="glyphicon glyphicon-book" aria-hidden="true"></span> e-Learning course'),
        'url' => $course_url['display_url'],
      );
    }

    foreach ($menu_items as $path => $menu_item) {
      $text = isset($menu_item['count'])
        ? sprintf('%s <span class="badge pull-right">%d</span>', $menu_item['title'], $menu_item['count'])
        : $menu_item['title'];
      $link = l($text, $node_url . '/' . $path, array('html' => TRUE));
      if ($path == 'course') {
        $link = l($menu_item['title'], $menu_item['url'], array('html' => TRUE));
      }
      $list_item = array('data' => $link, 'role' => 'presentation');
      if (isset($node->context) && $node->context == $path) {
        $list_item['class'][] = 'active';
      }
      $contextual_menu['#items'][] = $list_item;
    }
  }
}

function treaty_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  if (isset($router_item['page_arguments'][0]->type) && $router_item['page_arguments'][0]->type == 'treaty') {
    $context_menu = array();
    $node = $router_item['page_arguments'][0];
    drupal_alter('treaty_contextual_menu', $context_menu, $node);
    $data['tabs'][1] = array(
      'count' => count($context_menu),
      'output' => $context_menu,
    );
  }
}

function _treaty_get_treaties() {
  $query = new EntityFieldQuery();
  $result = $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'treaty')
    ->propertyCondition('status', NODE_PUBLISHED)
    ->fieldCondition('field_data_source', 'tid', $source_informea->tid)
    ->fieldOrderBy('field_official_name', 'value')
    ->execute();

  $treaties = array();
  $protocols = array();
  if (!isset($result['node'])) {
    return array();
  }
  $nodes = entity_load('node', array_keys($result['node']));
  foreach ($nodes as $nid => $node) {
    $wrapper = entity_metadata_wrapper('node', $node);
    $node->official_name = $wrapper->field_official_name->value();
    $node->logo = file_create_url($wrapper->field_logo->value()['uri']);
    // Protocols
    $parent = $wrapper->field_parent_treaty->value();
    if ($parent) {
      $protocols[$parent->nid][] = $node;
      continue;
    }
    $rs = $wrapper->field_region->value();
    $node->regions = array();
    foreach ($rs as $t) {
      $t_wrapper = entity_metadata_wrapper('taxonomy_term', $t);
      $t->name = $t_wrapper->label();
      $node->regions[] = $t->name;
    }
    $node->regions = implode(', ', $node->regions);
    $treaties[$nid] = $node;
  }
  // Protocols
  foreach ($protocols as $parent_nid => $protocols) {
    if (array_key_exists($parent_nid, $treaties)) { // Kuala Lumpur 3rd level
      $parent              = $treaties[$nid];
      $parent->protocols = $protocols;
    }
  }
  return $treaties;
}

/**
 * Displays the treaties page when the user visits the path.
 *
 * @return string
 *   String representing the content of the page.
 */
function treaty_view() {
//  drupal_set_title('');
  // Adds the treaties JavaScript file to the page.
  drupal_add_js(drupal_get_path('module', 'treaty') . '/js/treaties.js');
  $regions = array();
  $treaties = _treaty_get_treaties();
  foreach ($treaties as $node) {
    $wrapper = entity_metadata_wrapper('node', $node);
    $rs = $wrapper->field_region->value();
    foreach ($rs as $t) {
      $t_wrapper = entity_metadata_wrapper('taxonomy_term', $t);
      $t->name = $t_wrapper->label();
      $regions[$t->tid] = $t;
    }
  }

  uasort($regions, function($a, $b) { return strcasecmp($a->name, $b->name); });
  $ret = theme('treaties', array(
    'regions' => $regions,
    'treaties' => _treaty_get_treaties()
  ));
  return $ret;
}


function treaty_get_odata_identifier($treaty) {
  if(is_object($treaty)) {
    $id = $treaty->nid;
  }
  else {
    $id = $treaty;
  }
  $w = entity_metadata_wrapper('node', $id);
  return $w->field_odata_identifier->value();
}

/**
 * Absolute URL to a treaty article paragraph (in treaty text page).
 * @param $id_treaty
 * @param $id_article
 * @param $id_paragraph
 *
 * @return string
 */
function treaty_url_paragraph($id_treaty, $id_article, $id_paragraph) {
  $options = array(
    'absolute' => TRUE,
  );
  $link = url('node/' . $id_treaty, $options) . '/text?';
  $query = array('article' => $id_article, 'paragraph' => $id_paragraph);
  $fragment = 'paragraph-' . $id_paragraph;
  return $link . drupal_http_build_query($query) . '#' . $fragment;
}
