<?php

/**
 * Log system for the ws_consumer_odata migrations.
 *
 * @param string $message
 *   Log message
 * @param int $severity
 *    See MigrationBase::MESSAGE_* constants
 */
function ws_consumer_odata_log($message, $severity = MigrationBase::MESSAGE_INFORMATIONAL) {
  if (function_exists('drush_log')) {
    $status = 'status';
    switch($severity) {
      case MigrationBase::MESSAGE_ERROR:
        $status = 'error';
        break;
      case MigrationBase::MESSAGE_WARNING:
        $status = 'warning';
        break;
      case MigrationBase::MESSAGE_NOTICE:
        $status = 'notice';
        break;
    }
    drush_log($message, $status);
    // Command line, no further processing
    return;
  }
}

/**
 * Implements hook_cronapi().
 *
 * Provided by the elysia_cron module.
 */
function ws_consumer_odata_cronapi($ob, $job = NULL) {
  return array(
    'ws_consumer_odata_migrate_meetings' => array(
      'description' => 'Update OData meetings data every two days',
      'rule' => '0 1 * * *', // Every day at 01:00
    ),
    'ws_consumer_odata_migrate_contacts' => array(
      'description' => 'Update OData contacts every Monday',
      'rule' => '0 5 * * 1', // Every Monday at 05:00
    ),
    'ws_consumer_odata_migrate_decisions' => array(
      'description' => 'Update OData decisions every friday at 23:00',
      'rule' => '0 23 * * 5/2', // Every Friday at 23:00
    ),
    'ws_consumer_odata_migrate_nationalplans' => array(
      'description' => 'Update OData national plans every two weeks',
      'rule' => '0 5 * * 2/2', // Every other Tuesday at 05:00
    ),
    'ws_consumer_odata_migrate_countryreports' => array(
      'description' => 'Update OData country reports every two weeks',
      'rule' => '0 5 * * 3/2', // Every other Wednesday at 05:00
    ),
  );
}


function ws_consumer_odata_migrate_meetings() {
  $migrations = ws_consumer_odata_match_migrations_by_name('/_Meetings$/');
  watchdog('ws_consumer_odata', '[CRON] Migrating meetings', array(), WATCHDOG_DEBUG);
  ws_consumer_odata_run_sequential_migrations($migrations);
}

function ws_consumer_odata_migrate_contacts() {
  $migrations = ws_consumer_odata_match_migrations_by_name('/_Contacts$/');
  watchdog('ws_consumer_odata', '[CRON] Migrating contacts', array(), WATCHDOG_DEBUG);
  ws_consumer_odata_run_sequential_migrations($migrations);
}

function ws_consumer_odata_migrate_nationalplans() {
  $migrations = ws_consumer_odata_match_migrations_by_name('/_NationalPlans$/');
  watchdog('ws_consumer_odata', '[CRON] Migrating national plans', array(), WATCHDOG_DEBUG);
  ws_consumer_odata_run_sequential_migrations($migrations);
}

function ws_consumer_odata_migrate_countryreports() {
  $migrations = ws_consumer_odata_match_migrations_by_name('/_CountryReports$/');
  watchdog('ws_consumer_odata', '[CRON] Migrating country reports', array(), WATCHDOG_DEBUG);
  ws_consumer_odata_run_sequential_migrations($migrations);
}

function ws_consumer_odata_migrate_decisions() {
  $migrations = ws_consumer_odata_match_migrations_by_name('/_Decisions$/');
  watchdog('ws_consumer_odata', '[CRON] Migrating decisions', array(), WATCHDOG_DEBUG);
  ws_consumer_odata_run_sequential_migrations($migrations);
}

/**
 * @param array $migrations An array of migration machine names.
 * @throws \Exception
 */
function ws_consumer_odata_run_sequential_migrations($migrations) {
  foreach($migrations as $machine_name) {
    $migration = Migration::getInstance($machine_name);
    if ($migration->getStatus() != MigrationBase::STATUS_IDLE) {
      watchdog(
        'ws_consumer_odata',
        '[CRON][!machine_name] migration is currently not idle, skipping (status:!status)',
        array(
          '!machine_name' => $machine_name,
          '!status' => $migration->getStatus()
        ),
        WATCHDOG_ERROR
      );
      return;
    }
    else {
      watchdog(
        'ws_consumer_odata',
        '[CRON][!machine_name] starting migration',
        array('!machine_name' => $machine_name,),
        WATCHDOG_DEBUG
      );
      $status = $migration->processImport();
      watchdog(
        'ws_consumer_odata',
        '[CRON][!machine_name] ended, status: !status',
        array(
          '!status' => ws_consumer_odata_migration_result_friendly_name($status),
          '!machine_name' => $machine_name
        ),
        WATCHDOG_DEBUG
      );
    }
  }
}

/**
 * Implements hook_mail_alter().
 */
function ws_consumer_odata_mail_alter(&$message) {
  if ($message['module'] == 'event_calendar') {
    $message['send'] = FALSE;
  }
}


function ws_consumer_odata_match_migrations_by_name($pattern) {
  $ret = array();
  module_load_include('inc', 'ws_consumer_odata', 'ws_consumer_odata.migrate');
  $migrations = ws_consumer_odata_migrate_api();
  foreach($migrations['migrations'] as $name => $config) {
    if (preg_match($pattern, $name)) {
      $ret[] = $name;
    }
  }
  return $ret;
}


function ws_consumer_odata_migration_result_friendly_name($result) {
  switch($result) {
    case MigrationBase::RESULT_COMPLETED: // All records have been processed
      return 'completed';

    case MigrationBase::RESULT_INCOMPLETE:  // The process has interrupted itself (e.g., the memory limit is approaching)
      return 'incomplete';

    case MigrationBase::RESULT_STOPPED:     // The process was stopped externally (e.g., via drush migrate-stop)
      return 'stopped';

    case MigrationBase::RESULT_FAILED:      // The process had a fatal error
      return 'failed';

    case MigrationBase::RESULT_SKIPPED:     // Dependencies are unfulfilled - skip the process
      return 'skipped';

    case MigrationBase::RESULT_DISABLED:    // This migration is disabled, skipping
      return 'disabled';

    default:
      return 'unknown';
  }
}

