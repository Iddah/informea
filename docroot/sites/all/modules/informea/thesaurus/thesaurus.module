<?php

if(!function_exists('slugify')) {
  function slugify($phrase, $maxLength = 50) {
    $result = strtolower($phrase);
    $result = preg_replace("/[^a-z0-9\s-]/", "", $result);
    $result = trim(preg_replace("/[\s-]+/", " ", $result));
    $result = preg_replace("/\s/", "-", $result);
    return $result;
  }
}

/**
 *  Implements hook_url_inbound_alter().
 */
function thesaurus_url_inbound_alter(&$path, $original_path, $path_language) {
  if((arg(0, $path) == 'terms' || arg(1, $path) == 'terms') && preg_match('/\/ecolex$/', $path)) {
    global $language;
    $prefix = $language->language . '/';
    if (strpos($path, $prefix) === 0) {
      $path = substr($path, strlen($prefix));
    }
    $q = db_select('url_alias', 'a');
    $q->addField('a', 'source');
    $q->where("CONCAT(a.alias, '/ecolex') LIKE :p", array(':p' => '%' . $path));
    if ($source = $q->execute()->fetchField()) {
      $path = $source;
    }
  }
}

function thesaurus_get_section($path) {
  if((arg(0, $path) == 'terms' || arg(1, $path) == 'terms') && preg_match('/\/ecolex$/', $path)) {
    return 'ecolex';
  }
  return FALSE;
}

function thesaurus_menu() {
  return array(
    'terms' => array(
      'title' => 'Glossary',
      'page callback' => 'thesaurus_terms_page_view',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,
    ),
    'export/thesaurus.rdf' => array(
      'title' => 'Export in RDF',
      'page callback' => 'thesaurus_export_rdf',
      'delivery callback' => 'thesaurus_menu_export_rdf',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,
    ),
    'export/thesaurus.xls' => array(
      'title' => 'Export in MS Excel',
      'page callback' => 'thesaurus_export_xls',
      'delivery callback' => 'thesaurus_menu_export_xls',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,
    )
  );
}

/**
 * Implements hook_libraries_info().
 */
function thesaurus_libraries_info() {
  return array(
    'PHPExcel' => array(
      'name' => 'PHPExcel',
      'vendor url' => 'http://phpexcel.codeplex.com/',
      'download url' => 'https://github.com/PHPOffice/PHPExcel',
      'version callback' => 'thesaurus_get_library_version',
      'path' => 'Classes',
      'files' => array(
        'php' => array(
          'PHPExcel.php',
        ),
      ),
    ),
  );
}

function thesaurus_menu_export_rdf() {
  if ($xml = thesaurus_export_rdf()) {
    $filename = sprintf('thesaurus-%s.rdf', date('Ymd-Hi'));
    header("Content-Disposition: attachment; filename=$filename;");
    header('Content-type: application/rdf+xml; charset=utf-8');
    print $xml;
    drupal_exit();
    return;
  }
  // Fail with error
  drupal_page_header();
  header("HTTP/1.1 500 Internal Server Error", true, 500);
  watchdog('thesaurus', 'An error has occurred while generating the thesaurus RDF xml');
  // Perform end-of-request tasks.
  drupal_page_footer();
  print 'An error has occurred while generating the response. Please contact technical support';
  drupal_exit();
}


function thesaurus_theme() {
  return array(
    'term-tree' => array(
      'render element' => 'element',
      'template' => 'templates/term-tree',
      'variables' => array('term' => FALSE),
      'path' => drupal_get_path('module', 'thesaurus'),
    ),
    'term-hierarchy' => array(
      'render element' => 'element',
      'template' => 'templates/term-hierarchy',
      'variables' => array('parents' => array(), 'children' => array(), 'term' => FALSE),
      'path' => drupal_get_path('module', 'thesaurus'),
    ),
    'terms' => array(
      'render element' => 'element',
      'template' => 'templates/terms',
      'variables' => array('substantives' => array()),
      'path' => drupal_get_path('module', 'thesaurus'),
    ),
  );
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function thesaurus_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  if (arg(0) == 'taxonomy') {
    $section = thesaurus_get_section(request_path());
    $voc = taxonomy_vocabulary_machine_name_load('thesaurus_informea');
    /** @var stdClass $term */
    if ($term = taxonomy_term_load(arg(2))) {
      if ($term->vid == $voc->vid) {
        $menu_items = array(
          array(
            'data' => l(t('Treaties'), thesaurus_url_term($term)),
            'role' => 'presentation',
          ),
          array(
            'data' => l(t('ECOLEX'), thesaurus_url_term($term) . '/ecolex'),
            'role' => 'presentation',
          )
        );
        if($section == 'ecolex') {
          $menu_items[1]['class'] = array('active');
        }
        else {
          $menu_items[0]['class'] = array('active');
        }
        $contextual_menu = array(
          '#theme' => 'item_list',
          '#attributes' => array('class' => array('nav', 'nav-pills', 'nav-stacked')),
          '#items' => $menu_items
        );
        $data['tabs'][1] = array(
          'count' => count($menu_items),
          'output' => $contextual_menu,
        );
      }
    }
  }
}

/**
 * Implements hook_taxonomy_term_view().
 */
function thesaurus_taxonomy_term_view($term, $view_mode, $langcode) {
  if ($view_mode == 'full') {
    $voc = taxonomy_vocabulary_machine_name_load('thesaurus_informea');
    if ($term->vid == $voc->vid) {
      $section = thesaurus_get_section(request_path());
      if ($section == 'ecolex') {
        foreach (element_children($term->content) as $element_id) {
          hide($term->content[$element_id]);
          // Load the Ecolex content.
        }

        $legislation_url = ecolex_remote_url('taxonomy', $term->tid, 'legislation');
        $courdecisions_url = ecolex_remote_url('taxonomy', $term->tid, 'courtdecisions');
        $literature_url = ecolex_remote_url('taxonomy', $term->tid, 'literature');

        $elements = array(
          'legislation' => array(
            'header' => t('Legislation'),
            'body' => sprintf('<iframe class="ecolex" src="%s"></iframe>', $legislation_url) .
                      l(t('View more results on ECOLEX website'), $legislation_url, array('attributes' => array('class' => array('ecolex-link'), 'target' => '_blank')))
          ),
          'courtdecisions' => array(
            'header' => t('Court decisions'),
            'body' => sprintf('<iframe class="ecolex" src="%s"></iframe>', $courdecisions_url) .
                      l(t('View more results on ECOLEX website'), $courdecisions_url, array('attributes' => array('class' => array('ecolex-link'), 'target' => '_blank')))
          ),
          'literature' => array(
            'header' => t('Literature'),
            'body' => sprintf('<iframe class="ecolex" src="%s"></iframe>', $literature_url) .
                      l(t('View more results on ECOLEX website'), $literature_url, array('attributes' => array('class' => array('ecolex-link'), 'target' => '_blank')))
          )
        );
        $term->content['ecolex'] = array(
          'heading' => array(
            '#id' => 'disclaimer',
            '#type' => 'item',
            '#markup' => t('The content of this this area is exclusively provided by <a href="http://www.ecolex.org">ECOLEX</a> - the gateway to environmental law, which is a collaboration of IUCN, FAO and UNEP.')
          ),
          'tabs' => array(
            '#id' => 'ecolex-tabs',
            '#theme' => 'informea_bootstrap_tabs',
            '#elements' => $elements,
        ));
        drupal_add_js(drupal_get_path('module', 'thesaurus') . '/js/concept.js');
      }
      else {
        module_load_include('inc', 'thesaurus', 'thesaurus.related');
        $dp = new InforMEAThesaurusTermRelatedContent($term);
        $related_data = $dp->getRelatedContent($term);
        $related_content = InforMEAThesaurusTermRelatedContent::view($term, $related_data['treaties']);
        $term->content['tagged_content'] = array(
          '#markup' => drupal_render($related_content),
          '#weight' => 10,
        );
      }
    }
  }
}

/**
 * Implements hook_page_alter().
 */
function thesaurus_page_alter(&$page) {
  if ($ob = menu_get_object('taxonomy_term', 2)) {
    $hierarchy = thesaurus_term_hierarchy($ob);
    $hierarchy['term'] = $ob;
    if (!empty($hierarchy['children']) && !empty($hierarchy['parents'])) {
      $page['sidebar_first']['hierarchy'] = array(
        '#type' => 'item',
        '#markup' => theme('term-hierarchy', $hierarchy),
      );
    }
  }
}

/************************************ </HOOKS> ********************************/

/**
 * Libraries API version callback.
 */
function thesaurus_get_library_version() {
  $library = libraries_load('PHPExcel');
  $changelog_file = $library['library path'] . '/changelog.txt';

  if (file_exists($changelog_file)) {
    $changelog = file_get_contents($changelog_file);
    $match = array(0 => 0, 1 => 'n/a');
    if (preg_match('/\d{4}-\d{2}-\d{2}\s+\(v([0-9\.]+)/', $changelog, $match)) {
      return $match[1];
    }
    elseif (preg_match('/@version\s+([0-9\.]+)/', $changelog, $match)) {
      return $match[1];
    }
  }
  return 'n/a';
}

function thesaurus_menu_export_xls() {
  thesaurus_export_xls();
}

function thesaurus_terms_page_view() {
  // Adds the terms JavaScript file to the page.
  drupal_add_js(drupal_get_path('module', 'treaty') . '/js/terms.js');
  $substantives = array();
  $voc = taxonomy_vocabulary_machine_name_load('thesaurus_informea');
  $q = new EntityFieldQuery();
  $tids = $q->entityCondition('entity_type', 'taxonomy_term')
    ->propertyCondition('vid', $voc->vid)
    ->execute();
  $q = db_select('taxonomy_term_hierarchy', 'a')
    ->fields('a', array('tid'))
    ->condition('tid', array_keys($tids['taxonomy_term']), 'IN')
    ->condition('parent', 0);
  $tids = $q->execute()->fetchCol();
  foreach($tids as $tid) {
    $term = taxonomy_term_load($tid);
    $children = taxonomy_get_tree($voc->vid, $tid);
    $term->children = thesaurus_get_nested_tree($children, NULL, $tid);
    $substantives[$tid] = $term;
  }
  return theme('terms', array('substantives' => $substantives));
}

function thesaurus_get_nested_tree($terms = array(), $max_depth = NULL, $parent = 0, $parents_index = array(), $depth = 0) {
  $return = array();
  foreach($terms as $term) {
    foreach($term->parents as $term_parent) {
      if ($term_parent == $parent) {
        $return[$term->tid] = $term;
      }
      else {
        $parents_index[$term_parent][$term->tid] = $term;
      }
    }
  }

  foreach($return as &$term) {
    if (isset($parents_index[$term->tid]) && (is_null($max_depth) || $depth < $max_depth)) {
      $term->children = thesaurus_get_nested_tree($parents_index[$term->tid], $max_depth, $term->tid, $parents_index, $depth + 1);
    }
  }
  return $return;
}

function thesaurus_url_term($term) {
  return url('taxonomy/term/' . $term->tid, array('absolute' => TRUE));
}

/**
 * Generate the RDF XML to export
 */
function thesaurus_export_rdf() {
  $export = new InforMEAThesaurusExportRDF();
  return $export->toXML();
}

function thesaurus_export_xls() {
  libraries_load('PHPExcel');
  $filename = sprintf('thesaurus-%s.xls', date('Ymd-Hi'));
  header("Content-Type: 'application/vnd.ms-excel'");
  header("Content-Disposition: attachment; filename=$filename;");
  InforMEAThesaurusExportXLS::toXLS();
}

function thesaurus_term_hierarchy($term) {
  if (!is_object($term) || empty($term->tid)) {
    $term = taxonomy_term_load($term);
  }
  $parents = taxonomy_get_parents($term->tid);
  $children = taxonomy_get_tree($term->vid, $term->tid, 1);
  return array(
    'parents' => $parents,
    'children' => $children,
  );
}

/**
 * Synchronize InforMEA Thesaurus (thesaurus_informea) with VocBench.
 *
 * @param bool|FALSE $force_update
 *   If TRUE, force all terms will to be updated, otherwise only those changed
 */
function thesaurus_informea_sync_vocbench($force_update = FALSE) {
  $no_updated = 0;
  $no_created = 0;
  $vocbench = thesaurus_load_informea_from_rdf();
  $terms = array();
  $sha_ones = array();
  foreach ($vocbench as $uri => $vb_term) {
    if (!in_array($vb_term->status, array('Validated', 'Published'))) {
      continue;
    }

    $term = thesaurus_term_load_by_uri($uri, 'thesaurus_informea');
    $original_sha = NULL;
    if (empty($term)) {
      $voc = taxonomy_vocabulary_machine_name_load('thesaurus_informea');
      $term = (object) array(
        'name' => $vb_term->name,
        'language' => 'en',
        'vid' => $voc->vid,
        'vocabulary_machine_name' => $voc->machine_name,
      );
      $term->field_taxonomy_term_uri[LANGUAGE_NONE][0]['url'] = $uri;
    }
    else {
      $original_sha = sha1(json_encode($term));
    }
    $terms[$uri] = $term;
    $sha_ones[$uri] = $original_sha;
  }

  foreach ($terms as $uri => $term) {
    $original_sha = $sha_ones[$uri];
    $vb_term = $vocbench[$uri];

    // Term name in english
    $term->name = $vb_term->name;

    // Term name
    foreach($vb_term->prefLabel as $language => $value) {
      if (!empty($value)) {
        $term->name_field[$language][0]['value'] = $value;
      }
    }

    // Definition
    if (!empty($vb_term->definition['en'][0])) {
      $term->description = $vb_term->definition['en'][0];
    }
    if (count($term->description_field) != count($vb_term->definition)) {
      $skip_description = FALSE;
      if (count($vb_term->definition) == 0) {
        if ($term->description_field['en'][0]['value'] == NULL) {
          /*
           * If the term has no description, $vb_term->definition is an empty array, but
           * $term->description_field has an element with NULL value. In this case
           * we do not want to change de term because it would be updated
           * though not necessary
           */
          $skip_description = TRUE;
        }
      }
      if (!$skip_description) {
        $term->description_field = array();
        foreach($vb_term->definition as $language => $values) {
          if (!empty($values[0])) {
            $term->description_field[$language][0]['value'] = $values[0];
          }
        }
      }
    }
    // Synonyms
    if (count($term->field_term_synonyms) != count($vb_term->altLabel)) {
      $term->field_term_synonyms = array();
    }
    foreach($vb_term->altLabel as $language => $values) {
      if (!empty($values)) {
        foreach ($values as $key => $syno) {
          $term->field_term_synonyms[$language][$key]['value'] = $syno;
        }
      }
    }

    // Related from other thesauri
    if (empty($term->field_term_related_uri[LANGUAGE_NONE]) || count($term->field_term_related_uri[LANGUAGE_NONE]) != count($vb_term->relatedMatch)) {
      $term->field_term_related_uri = array();
    }
    foreach($vb_term->relatedMatch as $i => $v) {
      $term->field_term_related_uri[LANGUAGE_NONE][$i]['url'] = $v;
    }

    $sha = sha1(json_encode($term));
    if ($force_update || ($original_sha != $sha)) {
      $new = empty($term->tid);
      taxonomy_term_save($term);
      $translations = array();
      if (!empty($term->name_field)) {
        $translations = array_merge($translations, array_keys($term->name_field));
      }
      if (!empty($term->description_field)) {
        $translations = array_merge($translations, array_keys($term->description_field));
      }
      if (!empty($term->field_term_synonyms)) {
        $translations = array_merge($translations, array_keys($term->field_term_synonyms));
      }
      $languages = array_unique($translations);
      $translation_handler = entity_translation_get_handler('taxonomy_term', $term);
      foreach ($languages as $language) {
        if ($language == 'en' || $language == LANGUAGE_NONE) {
          continue;
        }
        $translation_handler->setTranslation(array(
          'translate' => 0,
          'status' => 1,
          'uid' => 1,
          'language' => $language,
          'source' => 'en',
        ));
        field_attach_update('taxonomy_term', $term);
      }
      watchdog('thesaurus', 'Updated term !tid: <a href="!turl">!name</a>, from VocBench: !vburl',
        array('!tid' => $term->tid, '!turl' => url('taxonomy/term/' . $term->tid), '!vburl' => $uri, '!name' => $term->name),
        WATCHDOG_INFO
      );
      if (function_exists('drush_log')) {
        drush_log(($new ? 'Create' : 'Update') . " term {$term->tid}: {$term->name}", "ok");
      }
      $new ? $no_created++ : $no_updated++;
    }
  }

  // After synchronization link parents & related terms
  foreach ($vocbench as $uri => $vb_term) {
    $ob = thesaurus_term_load_by_uri($uri, 'thesaurus_informea');
    if (!empty($vb_term->broader)) {
      $broader = thesaurus_term_load_by_uri($vb_term->broader, 'thesaurus_informea');
      if (empty($broader)) {
        watchdog('thesaurus', 'Cannot find parent term by URI: !buri',
          array('!buri' => $vb_term->broader),
          WATCHDOG_WARNING
        );
        continue;
      }
      if (empty($ob)) {
        watchdog('thesaurus', 'Cannot term by URI: !turi',
          array('!turi' => $uri),
          WATCHDOG_ERROR
        );
        continue;
      }

      $wrapper = entity_metadata_wrapper('taxonomy_term', $ob->tid);
      $parents = $wrapper->parent->value();
      if (empty($parents) || empty($parents[0]->tid) || $parents[0]->tid != $broader->tid) {
        $ob->parent = $broader->tid;
        taxonomy_term_save($ob);
        if (function_exists('drush_log')) {
          drush_log("Set '{$broader->name}' ({$broader->tid}) parent to '{$ob->name}' ({$ob->tid})", "ok");
        }
      }
    }
    if (!empty($vb_term->related)) {
      $ob->field_informea_tags[LANGUAGE_NONE] = array();
      foreach($vb_term->related as $rt_uri) {
        if ($related = thesaurus_term_load_by_uri($rt_uri, 'thesaurus_informea')) {
          $ob->field_informea_tags[LANGUAGE_NONE][] = array('tid' => $related->tid);
        }
      }
      taxonomy_term_save($ob);
    }
  }
  if (function_exists('drush_log')) {
    if ($no_created) {
      drush_log("Created {$no_created} terms.", "ok");
    }
    if ($no_updated) {
      drush_log("Updated {$no_updated} terms.", "ok");
    }
  }
}

function thesaurus_load_from_rdf_cached($rdf) {
  $thesaurus = NULL;
  $data = array();
  if ($cache = cache_get(__FUNCTION__, 'cache')) {
    $data = $cache->data;
  }
  if (!empty($data[$rdf])) {
    return $data[$rdf];
  }
  else {
    $thesaurus = thesaurus_load_from_rdf($rdf);
    if ($thesaurus) {
      $data[$rdf] = $thesaurus;
      cache_set(__FUNCTION__, $data, 'cache', time() + 3600);
    }
  }
  return $thesaurus;
}

function thesaurus_load_from_rdf($rdf) {
  if (!easyrdf()) {
    drupal_set_message(t('EasyRdf library is not available.'), 'error');
    return FALSE;
  }
  EasyRdf_Namespace::set('vb', 'http://art.uniroma2.it/ontologies/vocbench#');

  try {
    $graph = EasyRdf_Graph::newAndLoad($rdf);
    $resources = $graph->resources();
  }
  catch(Exception $e) {
    drupal_set_message("Failed to parse RDF file $rdf");
    return NULL;
  }

  $terms = array();
  /**
   * @var string $key
   * @var EasyRdf_Resource $resource
   */
  foreach ($resources as $key => $resource) {
    if ($resource->type() == 'skos:Concept') {
      $term = new stdClass();
      $term->name = NULL;
      $term->broader = NULL;
      $term->uri = $key;
      $term->prefLabel = array();
      $term->altLabel = array();
      $term->status = NULL;
      $term->definition = array();
      $term->relatedMatch = array();
      $term->related = array();

      // skos:broader
      if ($uri = $resource->get('skos:broader')) {
        $term->broader = (string) $uri;
      }

      // skos:prefLabel
      if ($prefLabels = $resource->allResources('skosxl:prefLabel')) {
        foreach($prefLabels as $prefLabel) {
          /** @var EasyRdf_Literal $lit */
          $lit = $prefLabel->get('skosxl:literalForm');
          $term->prefLabel[$lit->getLang()] = $lit->getValue();
        }
      }

      if (empty($term->prefLabel['en'])) {
        watchdog('thesaurus', 'Invalid VB term without english preffered label: !uri', array('!uri' => $key), WATCHDOG_WARNING);
      }
      else {
        $term->name = $term->prefLabel['en'];
      }

      // skos:altLabel
      if ($altLabels = $resource->allResources('skosxl:altLabel')) {
        foreach($altLabels as $altLabel) {
          /** @var EasyRdf_Literal $lit */
          $lit = $altLabel->get('skosxl:literalForm');
          $term->altLabel[$lit->getLang()][] = $lit->getValue();
        }
      }

      // skos:definition
      if ($definitions = $resource->allResources('skos:definition')) {
        foreach($definitions as $definition) {
          if ($value = $definition->get('rdf:value')) {
            $term->definition[$value->getLang()][] = $value->getValue();
          }
          else {
            // @todo: Ignore orphaned triple (missing rdf:value)
          }
        }
      }

      // skos:relatedMatch - external thesauri
      if ($relatedMatches = $resource->allResources('skos:relatedMatch')) {
        foreach($relatedMatches as $relatedMatch) {
          $term->relatedMatch[] = $relatedMatch->getUri();
        }
      }

      // skos:related - within same thesauri
      if ($related = $resource->allResources('skos:related')) {
        foreach($related as $r) {
          $term->related[] = $r->getUri();
        }
      }

      // vb:hasStatus
      if ($status = $resource->get('vb:hasStatus')) {
        $term->status = (string) $status;
      }


      if (empty($term->name) && !empty($term->altLabel['en'])) {
        $term->name = current($term->altLabel['en']);
      }

      if (!empty($term->name)) {
        $terms[$key] = $term;
      }
      else {
        watchdog('thesaurus', $key . ': Ignoring concept without name');
      }
    }
  }

  // Remove invalid parents (orphaned)
  foreach ($terms as $key => &$term) {
    if (isset($term->parent) && !isset($terms[$term->parent])) {
      unset($term->parent);
    }
  }
  return $terms;
}

function thesaurus_load_informea_from_rdf() {
  $url = variable_get('informea_vocbench_thesaurus_url', 'http://informea.org/sites/default/files/export/informea.rdf');
  return thesaurus_load_from_rdf_cached($url);
}

/**
 * Load a single term by its VocBench URI.
 *
 * @param string $uri
 * @param string $machine_name
 *
 * @return stdClass
 *  Taxonomy term loaded
 */
function thesaurus_term_load_by_uri($uri, $machine_name) {
  /** @var SelectQuery $q */
  $q = db_select('field_data_field_taxonomy_term_uri')->fields(NULL, array('entity_id'));
  $q->condition('field_taxonomy_term_uri_url', $uri);
  $q->condition('bundle', $machine_name);
  $q->condition('entity_type', 'taxonomy_term');
  if ($tid = $q->execute()->fetchField(0)) {
    return taxonomy_term_load($tid);
  }
  return NULL;
}

/**
 * Load a single term TID by its VocBench URI.
 *
 * @param string $uri
 * @param string $machine_name
 *
 * @return stdClass
 *  Taxonomy term tid
 */
function thesaurus_term_get_tid_by_uri($uri, $machine_name) {
  /** @var SelectQuery $q */
  $q = db_select('field_data_field_taxonomy_term_uri', 'a')->fields('a', array('entity_id'));
  $q->condition('field_taxonomy_term_uri_url', $uri);
  $q->condition('bundle', $machine_name);
  $q->condition('entity_type', 'taxonomy_term');
  $tid = $q->execute()->fetchField(0);
  return $tid != FALSE ? $tid : NULL;
}
