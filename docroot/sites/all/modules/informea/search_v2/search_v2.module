<?php
/**
 * @file
 * Code for the Search V2 feature.
 */

include_once 'search_v2.features.inc';

/**
 * Implements hook_entity_info_alter().
 */
function search_v2_entity_info_alter(&$entity_info) {
  $entity_info['node']['view modes']['search_item'] = array(
    'label' => t('Search item'),
    'custom settings' => TRUE,
  );
}

function search_v2_theme() {
  return array(
    'informea_node_metadata' => array(
      'template' => 'informea_node_metadata',
      'variables' => array(
        'meta' => [],
      ),
      'path' => drupal_get_path('module', 'search_v2') . '/templates',
    ),
  );
}

/**
 * Implements hook_facet_items_alter().
 */
function search_v2_facet_items_alter(&$build, &$settings) {
  switch ($settings->name) {
    case 'search_api@default_index:block:field_region':
    case 'search_api@default_index:block:field_mea_topic':
      $text = $settings->facet == 'field_region' ? t('All Regions') : t('All Topics');
      $select_all = [
        '#html' => TRUE,
        '#active' => TRUE,
        '#markup' =>  sprintf('%s <span class="item-label">%s</span>', t('In'), $text),
        '#query' => ['f' => []],
        '#count' => NULL,
      ];
      foreach ($build as &$item) {
        $item['#html'] = TRUE;
        $item['#markup'] = sprintf('%s <span class="item-label">%s</span>', t('only in'), $item['#markup']);

        $select_all['#path'] = $item['#path'];
        if (!empty($item['#active'])) {
          $select_all['#active'] = FALSE;
        }
        if (!empty($item['#query']['f'])) {
          $select_all['#query']['f'] = array_merge($select_all['#query']['f'], $item['#query']['f']);
        }
      }
      if (!empty($select_all['#path'])) {
        // Display "In All Regions" / "In All Topics" option.
        foreach ($select_all['#query']['f'] as $key => $value) {
          if (preg_match('/^' . $settings->facet . ':/', $value)) {
            unset($select_all['#query']['f'][$key]);
          }
        }
        array_unshift($build, $select_all);
      }
      break;
  }
}

/**
 * Implements hook_node_view().
 */
function search_v2_node_view($node, $view_mode, $langcode) {
  if ($view_mode == 'search_item') {
    $content = &$node->content;
    $left_column = [];
    $wrapper = entity_metadata_wrapper('node', $node);
    $meta = [
      'content_type' => node_type_get_name($node),
    ];
    switch ($node->type) {
      case 'treaty':
        if (!empty($content['field_logo'])) {
          $left_column['field_logo'] = $content['field_logo'];
          unset($content['field_logo']);
        }
        $meta['full_treaty_text_link'] = l(t('Full Treaty Text'), 'node/'. $node->nid .'/text');
        $meta['parties_link'] = l(t('Parties'), 'node/'. $node->nid .'/parties');
        if (!empty($wrapper->field_online_course_link->value())) {
          $meta['related_online_course_link'] = l(t('Related Online Course'), $wrapper->field_online_course_link->value()['url']);
        }
        if (!empty($wrapper->field_treaty_text_url->value())) {
          $meta['original_source_link'] = l(t('Link to Original Source'), $wrapper->field_treaty_text_url->value()['url']);
        }
        break;
    }
    $content['left_column'] = $left_column;
    $content['meta'] = array(
      '#theme' => 'informea_node_metadata',
      '#meta' => $meta,
      '#weight' => 10,
    );
  }
}