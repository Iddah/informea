<?php
/**
 * @file
 * Code for the informea_search feature.
 */

include_once 'informea_search.features.inc';

/**
 * Implements hook_entity_info_alter().
 */
function informea_search_entity_info_alter(&$entity_info) {
  $entity_info['node']['view modes']['search_item'] = [
    'label' => t('Search item'),
    'custom settings' => TRUE,
  ];
}

/**
 * Implements hook_theme().
 */
function informea_search_theme($existing, $type, $theme, $path) {
  return [
    'informea_node_metadata' => [
      'template' => 'informea_node_metadata',
      'variables' => [
        'meta' => [],
      ],
      'path' => drupal_get_path('module', 'informea_search') . '/templates',
    ],
  ];
}



/**
 * Implements hook_facet_items_alter(&$build, &$settings);
 */
function informea_search_facet_items_alter(&$build, &$settings) {
  switch ($settings->name) {
    case 'search_api@default_index:block:field_region':
    case 'search_api@default_index:block:field_mea_topic':
      $text = $settings->facet == 'field_region' ? t('All Regions') : t('All Topics');
      $select_all = [
        '#html' => TRUE,
        '#active' => TRUE,
        '#markup' => sprintf('%s <span class="item-label">%s</span>', t('In'), $text),
        '#query' => ['f' => []],
        '#count' => NULL,
      ];
      foreach ($build as &$item) {
        $item['#html'] = TRUE;
        $item['#markup'] = sprintf('%s <span class="item-label">%s</span>', t('only in'), $item['#markup']);

        $select_all['#path'] = $item['#path'];
        if (!empty($item['#active'])) {
          $select_all['#active'] = FALSE;
        }
        if (!empty($item['#query']['f'])) {
          $select_all['#query']['f'] = array_merge($select_all['#query']['f'], $item['#query']['f']);
        }
        if (!empty($item['#query']['text'])) {
          $select_all['#query']['text'] = $item['#query']['text'];
        }
      }
      if (!empty($select_all['#path'])) {
        // Display "In All Regions" / "In All Topics" option.
        foreach ($select_all['#query']['f'] as $key => $value) {
          if (preg_match('/^' . $settings->facet . ':/', $value)) {
            unset($select_all['#query']['f'][$key]);
          }
        }
        array_unshift($build, $select_all);
      }
      break;

    case 'search_api@default_index:block:field_contact_roles:field_contact_role':
    case 'search_api@default_index:block:field_person_type':
      if (!informea_search_check_facet_url_param('search', 'contact_person')) {
        $settings->enabled = FALSE;
        $build = array();
      }
      break;

    case 'search_api@default_index:block:field_document_type':
    case 'search_api@default_index:block:year_of_text':
      if (!informea_search_check_facet_url_param('search', 'document')) {
        $settings->enabled = FALSE;
        $build = array();
      }
      break;

  }
}

function informea_search_check_facet_url_param($path = '', $param = NULL){
  if (preg_match("/^search/", current_path(), $matches)) {
    $query = drupal_get_query_parameters();
    if (isset($query['f']) && is_array($query['f'])) {
      if (in_array("type:$param", $query['f'])) {
        return TRUE;
      }
    }
    return FALSE;
  }
  return TRUE;
}

/**
 * Implements hook_views_pre_render().
 */
function informea_search_views_pre_render(&$view) {
  switch ($view->name) {
    case 'informea_search':
      drupal_add_library('informea', 'smallipop');
      drupal_add_js(drupal_get_path('module', 'informea_search') . '/js/informea_search.js');

    // do not break here
    case 'informea_search_legislation':
    case 'informea_search_court_decision':
    case 'informea_search_publications':
    case 'informea_search_bilateral_treaties':
    case 'informea_search_goals_and_principles':
      $content = '';
      if (@$_GET['text']) {
        $content = sprintf('<div class="results-for">%s: <b>%s</b></div>', t('Results for'), @$_GET['text']);
      }
      $view->attachment_before = $content;
      break;
  }
}

function informea_search_block_info() {
  return [
    'search_informea' => [
      'info' => t('InforMEA search box'),
      'cache' => DRUPAL_NO_CACHE,
      'weight' => 10,
      'status' => 1,
      'region' => 'navigation',
      'visibility' => BLOCK_VISIBILITY_NOTLISTED,
      'pages' => '',
    ],
    'search_categories_tabs' => [
      'info' => t('InforMEA search categories'),
      'cache' => DRUPAL_NO_CACHE,
      'region' => 'above_page_header',
      'status' => 1,
    ],
  ];
}

/**
 * Implements hook_block_view().
 */
function informea_search_block_view($delta = '') {
  $block = [];
  switch ($delta) {
    case 'search_informea':
      $form = drupal_get_form('informea_search_form');
      unset($form['form_id']);
      unset($form['form_build_id']);
      $block['content'] = $form;
      break;

    case 'search_categories_tabs':
      $search_category_options = informea_search_categories();
      $curent_categories = _informea_search_get_current_categories();
      foreach ($curent_categories as $current_category) {
        $search_category_options[$current_category]['active'] = TRUE;
      }
      $options = array();
      foreach ($search_category_options as $key => $value) {
        $options[] = array(
          'key' => $key,
          'label' => $value['label'],
          'is_group_label' => isset($value['is_group_label']) ? $value['is_group_label'] : NULL,
          'active' => isset($value['active']) ? $value['active'] : NULL,
          'query' => isset($value['query']) ? $value['query'] : [],
        );
      }
      $last_val = end($options);
      $last_key = key($options);
      unset($options[$key]);
      $options = array($last_key => $last_val) + $options;

      $block['content'] = [
        '#theme_wrappers' => ['informea_search_categories_tabs_wrapper'],
        '#category-options' => $options,
      ];
      break;
  }
  return $block;
}


function informea_search_categories_build_query($query = []) {
  $q = [];
  foreach ($query as $key => $v) {
    foreach ($v as $param_key => $param) {
      foreach ($param as $p) {
        $q[$key][] = "$param_key:$p";
      }
    }
  }
  $get_query_parameters = drupal_get_query_parameters();
  if (!empty($get_query_parameters['field_region'])) {
    $q['f'][] = "field_region:{$get_query_parameters['field_region']}";
  }
  if (!empty($get_query_parameters['field_mea_topic'])) {
    $q['f'][] = "field_mea_topic:{$get_query_parameters['field_mea_topic']}";
  }
  if (!empty($get_query_parameters['text'])) {
    $q['text'] = check_plain($get_query_parameters['text']);
  }
  return $q;
}

function informea_search_categories_build_link($query = []) {
  $q = informea_search_categories_build_query($query);
  return url('search', ['query' => $q]);
}

/**
 * Implements hook_search_api_views_query_alter().
 */
function informea_search_search_api_views_query_alter(view &$view, SearchApiViewsQuery &$query) {
  if ($view->name == 'informea_search') {
    $multilateral_treaties = _informea_search_get_treaties_by_data_source(DATA_SOURCE_ECOLEX, TRUE);
    if (empty($multilateral_treaties)) {
      $multilateral_treaties = [-1];
    }
    $group = $query->set_where_group('OR');
    foreach ($multilateral_treaties as $multilateral_treaty) {
      // @todo: SearchApiViewsQuery does not support operator "IN"?!?!
      $query->condition('nid', $multilateral_treaty, '=', $group);
      $query->condition('field_treaty', $multilateral_treaty, '=', $group);
    }
  }
}

function informea_search_search_api_solr_query_alter(array &$call_args, SearchApiQueryInterface $query) {
  $pos = array_search('{!tag=facet:type}ss_type:"all_treaty"', $call_args['params']['fq']);
  if ($pos !== FALSE) {
    $call_args['params']['fq'][$pos] = '{!tag=facet:type}((ss_type:"treaty_article") OR (ss_type:"treaty_paragraph"))';
  }
  $pos = array_search('{!tag=facet:type}ss_type:"all_decision"', $call_args['params']['fq']);
  if ($pos !== FALSE) {
    $call_args['params']['fq'][$pos] = '{!tag=facet:type}((ss_type:"decision") OR (ss_type:"decision_paragraph"))';
  }
}

function _informea_search_get_treaties_by_data_source($source_tid, $negate_condition = FALSE) {
  $query = db_select('node', 'n');
  $query->leftJoin('field_data_field_data_source', 'ds', 'n.nid = ds.entity_id');
  $query->fields('n', ['nid']);
  $query->condition('n.type', 'treaty');
  if ($negate_condition == TRUE) {
    $or = db_or();
    $or->condition('ds.field_data_source_tid', $source_tid, '!=');
    $or->isNull('ds.field_data_source_tid');
    $query->condition($or);
  }
  else {
    $query->condition('ds.field_data_source_tid', $source_tid, '=');
  }
  return $query->execute()->fetchCol();
}

/**
 * Implementation of hook_menu().
 */
function informea_search_menu() {
  $items['ajax/search/%'] = [
    'page callback' => 'informea_search_ajax_get_ajax',
    'page arguments' => [2],
    'type' => MENU_CALLBACK,
    'access arguments' => ['access content'],
    'delivery callback' => 'informea_search_ajax_callback',
  ];
  $items['external-search'] = [
    'page callback' => 'informea_search_external_search',
    'type' => MENU_CALLBACK,
    'access arguments' => ['access content'],
  ];
  $items['prepare-search'] = [
    'page callback' => 'informea_search_prepare_search',
    'type' => MENU_CALLBACK,
    'access arguments' => ['access content'],
  ];

  return $items;
}

function informea_search_ajax_get_ajax_treaties($term, &$data) {
  $condition = db_or()
    ->condition('n.title', '%' . $term . '%', 'like')
    ->condition('fa.field_title_abbreviation_value', '%' . $term . '%', 'like')
    ->condition('fn.field_official_name_value', '%' . $term . '%', 'like');

  $query = db_select('node', 'n')
    ->condition('n.type', 'treaty')
    ->condition('n.status', NODE_PUBLISHED)
    ->fields('n', ['nid']);

  $query->leftJoin('field_data_field_title_abbreviation', 'fa', 'fa.entity_id = n.nid');
  $query->leftJoin('field_data_field_official_name', 'fn', 'fn.entity_id = n.nid');

  $query->condition($condition)
    ->range(0, 5);

  $result = $query->execute()->fetchAllKeyed();

  if (!empty($result)) {
    $nids = array_keys($result);
    $nodes = entity_load('node', $nids);

    foreach ($nodes as $node) {
      $wrapper = entity_metadata_wrapper('node', $node);

      $img = treaty_url_logo($node);
      $label = $wrapper->label();
      if (!empty($img)) {
        $label = $img . ' ' . $label;
      }

      $data[] = [
        'category' => t('Treaties'),
        'label' => $label,
        'link' => url('node/' . $wrapper->getIdentifier()),
        'value' => $wrapper->label(),
      ];
    }
  }
}

function informea_search_ajax_get_ajax_countries($term, &$data) {
  $query = new EntityFieldQuery();

  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'country')
    ->propertyCondition('status', NODE_PUBLISHED)
    ->fieldCondition('title_field', 'value', '%' . $term . '%', 'like')
    ->range(0, 5);

  $result = $query->execute();

  if (isset($result['node'])) {
    $nids = array_keys($result['node']);
    $nodes = entity_load('node', $nids);

    foreach ($nodes as $node) {
      $wrapper = entity_metadata_wrapper('node', $node);

      $iso2 = strtolower($wrapper->field_country_iso2->value());
      $img = theme('image', ['path' => drupal_get_path('theme', 'informea_theme') . '/img/flags/flag-' . $iso2 . '.png']);

      $data[] = [
        'category' => t('Countries'),
        'label' => $img . ' ' . $wrapper->label(),
        'link' => url('countries/' . $iso2),
        'value' => $wrapper->label(),
      ];
    }
  }
}

function informea_search_ajax_get_ajax_terms($term, &$data) {
  $query = new EntityFieldQuery();

  $query->entityCondition('entity_type', 'taxonomy_term')
    ->entityCondition('bundle', 'thesaurus_informea')
    ->fieldCondition('name_field', 'value', '%' . $term . '%', 'like')
    ->range(0, 5);

  $result = $query->execute();

  if (isset($result['taxonomy_term'])) {
    $tids = array_keys($result['taxonomy_term']);
    $terms = entity_load('taxonomy_term', $tids);

    foreach ($terms as $term) {
      $wrapper = entity_metadata_wrapper('taxonomy_term', $term);

      $img = theme('image', [
        'path' => drupal_get_path('theme', 'informea_theme') . '/img/logo-leo.png',
        'attributes' => ['class' => 'leo-logo-search-image'],
      ]);

      $data[] = [
        'category' => t('Terms'),
        'label' => $img . ' ' . $wrapper->label(),
        'link' => url('taxonomy/term/' . $term->tid),
        'value' => $wrapper->label(),
      ];
    }
  }
}

function informea_search_ajax_get_ajax($term) {
  $data = [
    [
      'category' => '',
      'label' => t('Search for: <strong>@term</strong>', ['@term' => $term]),
      'link' => url('search/' . $term),
      'value' => $term,
    ],
  ];

  informea_search_ajax_get_ajax_treaties($term, $data);
  informea_search_ajax_get_ajax_countries($term, $data);
  informea_search_ajax_get_ajax_terms($term, $data);

  return $data;
}

function informea_search_ajax_callback($data) {
  $source = json_encode($data);
  header('Content-Type: application/json');
  print $source;
}

function informea_search_categories(){
  return [
    'treaties' => [
      'label' => t('Treaties'),
      'is_group_label' => TRUE,
      'query' => ['f' => ['type' => ['treaty', 'decision']]],
    ],
    'treaty' => [
      'label' => t('Treaty texts'),
      'query' => ['f' => ['type' => ['treaty']]],
    ],
    'decision' => [
      'label' => t('Decisions texts'),
      'query' => ['f' => ['type' => ['decision']]],
    ],
    'national_submissions' => [
      'label' => t('National Submissions'),
      'is_group_label' => TRUE,
      'query' => ['f' => ['type' => ['action_plan', 'national_report']]],
    ],
    'action_plan' => [
      'label' => t('National Plans'),
      'query' => ['f' => ['type' => ['action_plan']]],
    ],
    'national_report' => [
      'label' => t('National Reports'),
      'query' => ['f' => ['type' => ['national_report']]],
    ],
    'national_legislation_cases' => [
      'label' => t('Law and Cases'),
      'is_group_label' => TRUE,
      'query' => ['f' => ['type' => ['court_decisions', 'legislation']]],
    ],
    'legislation' => [
      'label' => t('Legislation'),
      'query' => ['f' => ['type' => ['legislation']]],
    ],
    'court_decisions' => [
      'label' => t('Court Decisions'),
      'query' => ['f' => ['type' => ['court_decisions']]],
    ],
    'documents_literature' => [
      'label' => t('Documents and Literature'),
      'is_group_label' => TRUE,
      'query' => ['f' => ['type' => ['document', 'literature']]],
    ],
    'publication' => [
      'label' => t('Publications'),
      'query' => [
        'f' => [
          'type' => ['document'],
          'field_document_type' => [
            2805,
            3159,
          ],
        ],
      ],
    ],
    'manual' => [
      'label' => t('Manuals'),
      'query' => [
        'f' => [
          'type' => ['document'],
          'field_document_type' => [
            3178,
          ],
        ],
      ],
    ],
    'technical' => [
      'label' => t('Technical Series'),
      'query' => [
        'f' => [
          'type' => ['document'],
          'field_document_type' => [
            2817,
          ],
        ],
      ],
    ],
    'news_events' => [
      'label' => t('News and Events'),
      'is_group_label' => TRUE,
      'query' => ['f' => ['type' => ['feed_item', 'event_calendar']]],
    ],
    'goals_and_declarations' => [
      'label' => t('Goals and declarations'),
      'is_group_label' => TRUE,
      'query' => ['f' => ['type' => ['goal', 'declaration']]],
    ],
    'contact_person' => [
      'label' => t('Contacts HUB'),
      'is_group_label' => TRUE,
      'query' => ['f' => ['type' => ['contact_person']]],
    ],
    'all' => [
      'label' => t('All Categories'),
      'is_group_label' => TRUE,
    ],
  ];
}

function informea_search_form($form, $form_state) {
  $action = 'search';
  $search_query = !empty($_GET['text']) ? check_plain($_GET['text']) : '';
  $variant = variable_get('select2_compression_type', 'minified');
  $search_category_options = informea_search_categories();

  $current_category = _informea_search_get_current_categories(TRUE);

  //$current_category = _informea_search_get_current_category();
  $search_category_options[$current_category]['selected'] = TRUE;

  $form = [
    '#id' => 'search-form',
    '#action' => url('prepare-search'),
    '#method' => 'get',
    '#always_process' => TRUE,
    '#token' => FALSE,
    '#attributes' => ['class' => ['search-form']],
    'text' => [
      '#theme_wrappers' => ['informea_search_form_wrapper'],
      '#type' => 'textfield',
      '#default_value' => html_entity_decode($search_query),
      '#size' => 25,
      '#maxlength' => 255,
      '#attributes' => [
        'placeholder' => t('Search'),
      ],
      '#category-options' => $search_category_options,
    ],
    'action' => [
      '#type' => 'hidden',
      '#value' => $action,
    ],
    'actions' => [
      'submit' => [
        '#type' => 'submit',
        '#name' => '',
        '#value' => '',
        '#attributes' => ['class' => ['btn-default', 'element-invisible']],
      ],
    ],
  ];


  $page = page_manager_get_current_page();
  if (!empty($page['name'])) {
    if ($page['name'] == 'page-region_page' || $page['name'] == 'page-topic_page' && !empty($page['contexts'])) {
      foreach ($page['contexts'] as $context) {
        if (!empty($context->keyword) && !empty($context->argument)) {
          if ($context->keyword == 'region') {
            $form['field_region'] = [
              '#type' => 'hidden',
              '#value' => $context->argument,
            ];
          }
          elseif ($context->keyword == 'topic') {
            $form['field_mea_topic'] = [
              '#type' => 'hidden',
              '#value' => $context->argument,
            ];
          }
        }
      }
    }
  }

  return $form;
}

function informea_search_external_search() {
  $input = isset($_GET['keys']) ? check_plain($_GET['keys']) : '';
  drupal_goto('search/' . $input);
}

function _informea_search_get_current_categories($only_latest = FALSE) {
  $types = [];
  $document_types = [];
  if (!empty($_GET['f']) && is_array($_GET['f'])) {
    foreach ($_GET['f'] as $filter) {
      if (preg_match('/^type:(.+)$/', $filter, $matches)) {
        $types[] = $matches[1];
      }
      elseif (preg_match('/^field_document_type:(.+)$/', $filter, $matches)) {
        $document_types[] = $matches[1];
      }
    }
  }

  $search_category_options = informea_search_categories();

  $active = [];
  foreach ($search_category_options as $k => $category) {
    if (isset($category['query']['f']['type'])) {
      if (!empty($category['is_group_label'])) {
        if (array_intersect($types, $category['query']['f']['type'])) {
          $active[] = $k;
        }
      }
      else {
        if ($types == $category['query']['f']['type']) {
          if (isset($category['query']['f']['field_document_type'])) {
            if ($document_types == $category['query']['f']['field_document_type']) {
              $active[] = $k;
            }
          }
          else {
            $active[] = $k;
          }
        }
      }
    }
  }
  if (count($active) == 0) {
    $active[] = 'all';
  }

  if ($only_latest) {
    $active = end($active);
  }
  return $active;
}


function informea_search_prepare_search() {
  $options = [];
  if (!empty($_GET['category'])) {
    $search_category = check_plain($_GET['category']);

    $search_category_options = informea_search_categories();
    if (isset($search_category_options[$search_category]['query'])) {
      $options_query = $search_category_options[$search_category]['query'];
    }
    else {
      $options_query = [];
    }
    $options['query'] = informea_search_categories_build_query($options_query);
  }
  drupal_goto('search', $options);
}


/**
 * Implements hook_form_alter().
 *
 * Hide the form full-text search field to the users. The field is
 * added to allow passing text parameter
 */
function informea_search_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'views_exposed_form') {
    switch ($form['#id']) {
      case 'views-exposed-form-search-search':
        if (!empty($_GET['f'])) {
          foreach ($_GET['f'] as $key => $val) {
            $form["f[{$key}]"] = [
              '#type' => 'hidden',
              '#weight' => '50',
              '#value' => $val,
            ];
          }
        }
        hide($form['submit']);
        hide($form['text']);
        unset($form['#info']['filter-search_api_views_fulltext']['label']);
        break;

      case 'views-exposed-form-search-search-documents':
        hide($form['submit']);
        hide($form['text_documents']);
        unset($form['#info']['filter-search_api_views_fulltext']['label']);
        break;

      case 'views-exposed-form-search-search-contacts-hub-treaty':
      case 'views-exposed-form-search-search-contacts-hub-country':
        hide($form['submit']);
        hide($form['text_contacts']);
        unset($form['#info']['filter-search_api_views_fulltext']['label']);
        break;

      default:
        break;
    }
  }
}

/**
 * Implements hook_facetapi_widgets().
 */
function informea_search_facetapi_widgets() {
  return [
    'facetapi_checkbox_links_altered' => [
      'handler' => [
        'label' => t('Links with checkboxes (altered by informea)'),
        'class' => 'FacetapiWidgetCheckboxLinksInformea',
        'query types' => ['term', 'date'],
      ],
    ],
  ];
}

/**
 * Implements hook_entity_property_info_alter().
 */
function informea_search_entity_property_info_alter(&$info) {
  $info['node']['properties']['title_index'] = [
    'type' => 'text',
    'label' => t('Title - indexed as string (used for sorting)'),
    'sanitized' => TRUE,
    'getter callback' => '_informea_search_title_index_property_callback',
  ];
  $info['node']['properties']['year_of_text'] = [
    'type' => 'integer',
    'label' => t('Year of text'),
    'description' => t("Extracted year from Date of text"),
    'sanitized' => TRUE,
    'getter callback' => 'informea_search_year_of_text_callback',
  ];
}

function _informea_search_title_index_property_callback($item) {
  return $item->title;
}

/**
 * Extract the year from the date of text field.
 */
function informea_search_year_of_text_callback($item) {
  if (!empty($item->field_sorting_date[LANGUAGE_NONE][0]['value'])
    && preg_match('/^(\d{4})\-.+/', $item->field_sorting_date[LANGUAGE_NONE][0]['value'], $matches)) {
    return $matches[1];
  }
  return NULL;
}

/**
 * Implements hook_node_view().
 */
function informea_search_node_view($node, $view_mode, $langcode) {
  if ($view_mode == 'search_item') {
    $view = views_get_current_view();
    $content = &$node->content;
    $left_column = [];
    $meta = [];

    // switch ($node->type) {
    //   case 'event_calendar':
    //     $meta = [
    //       'content_type' => t('Event'),
    //     ];
    //     break;

    //   default:
    //     $meta = [
    //       'content_type' => node_type_get_name($node),
    //     ];
    // }

    if (!empty($view->result)) {
      foreach ($view->result as $result) {
        if (!empty($result->_entity_properties['nid']) && ($result->_entity_properties['nid'] == $node->nid) && !empty($result->_entity_properties['search_api_excerpt'])) {
          // Provide the excerpt to 'Search Item' view-mode template.
          $node->search_api_excerpt = $result->_entity_properties['search_api_excerpt'];
        }
      }
    }

    switch ($node->type) {

      case 'action_plan':
      case 'national_report':
        // Move treaty field to left column.
        if (!empty($content['field_treaty'])) {
          $left_column['field_treaty'] = $content['field_treaty'];
        }

        // Move files to metadata container.
        if (!empty($content['field_files'])) {
          $meta['field_files'] = $content['field_files'];
        }
        break;

      case 'court_decisions':
        if (!empty($content['field_url']['0']['#element']['title'])) {
          $content['field_url']['0']['#element']['title'] = t('Link to Original Source');
        }

        foreach (['field_url', 'field_files', 'field_sorting_date'] as $field) {
          if (!empty($content[$field])) {
            $meta[$field] = $content[$field];
          }
        }
        break;

      case 'legislation':
        $meta['full_text_link'] = l(t('Link to Full Text'), 'node/' . $node->nid);

        // Move files to metadata container.
        if (!empty($content['field_files'])) {
          $meta['field_files'] = $content['field_files'];
        }

        // Move "Date of text" to metadata container.
        if (!empty($content['field_sorting_date'])) {
          $meta['field_sorting_date'] = $content['field_sorting_date'];
        }
        break;

      case 'event_calendar':
        if (!empty($content['event_calendar_date'])) {
          $left_column['event_calendar_date'] = $content['event_calendar_date'];
        }
        break;

      case 'feed_item':
        // Move treaty field to left column.
        if (!empty($content['field_treaty'])) {
          $left_column['field_treaty'] = $content['field_treaty'];
        }

        $meta['published'] = [
          '#markup' => sprintf('<div class="field field-label-inline"><div class="field-label">%s:</div><div class="field-item">%s</div></div>',
            t('Published'),
            date('j M Y', $node->created)
          ),
        ];
        break;

      case 'contact_person':
      case 'decision':
      case 'document':
        // Move treaty field to left column.
        if (!empty($content['field_treaty'])) {
          $left_column['field_treaty'] = $content['field_treaty'];
        }
        break;
/*
      case 'country':
        if (!empty($node->field_country_iso2[LANGUAGE_NONE][0]['value'])) {
          $left_column['flag'] = [
            '#markup' => theme('image', [
              'path' => drupal_get_path('theme', 'informea_theme') . '/img/flags/flag-' . strtolower($node->field_country_iso2[LANGUAGE_NONE][0]['value']) . '.png',
              'attributes' => ['class' => ['flag', 'flag-medium']],
            ]),
          ];
        }
        break;*/

      case 'goal':
        $wrapper = entity_metadata_wrapper('node', $node);
        $goal_type = $wrapper->field_goal_type->value();
        $goal_source = $wrapper->field_goal_source->value();
        if (!empty($goal_type->name)) {
          $meta['content_type'] = $goal_type->name;
        }

        // Prepend the source and append the summary to title
        if (!empty($goal_source) && is_object($goal_source)) {
          $goal_source_wrapper = entity_metadata_wrapper('taxonomy_term', $goal_source);
          if (!empty($goal_source_wrapper->field_abbreviation->value())) {
            $node->title = $goal_source_wrapper->field_abbreviation->value() . ' ' . $node->title;
          }
        }
        if (!empty($content['field_summary'][0]['#markup'])) {
          $node->title .= ': ' . $content['field_summary'][0]['#markup'];
        }
        // Move image field to left column.
        if (!empty($content['field_images'])) {
          $left_column['field_images'] = $content['field_images'];
          // unset($content['field_images']);
        }
        break;

    }
    $content['meta'] = [
      '#theme' => 'informea_node_metadata',
      '#meta' => $meta,
      '#weight' => 100,
    ];
  }
}
