<?php
/**
 * @file
 * Code for the country_data feature.
 */

include_once 'country_data.features.inc';

/**
 * Defines menu items and page callbacks.
 *
 * @return
 *   An associative array of properties for each path.
 */
function country_data_menu() {
  $items['countries/%country'] = array(
    'page callback'    => 'country_data_country_page_view',
    'page arguments'   => array(1),
    'access arguments' => array('view entities'),
    'type'             => MENU_CALLBACK,
  );
  $items['countries'] = array(
    'title' => 'Countries',
    'page callback' => 'country_data_map_view',
    'access arguments' => array('access content')
  );

  $items['countries/list'] = array(
    'title' => 'Countries',
    'page callback' => 'country_data_list_view',
    'access arguments' => array('access content')
  );
  return $items;
}

/**
 * Loads the properties of areas.
 *
 * @return
 *   An associative array of properties for each area.
 */
function _country_data_get_areas() {
  // Loads all properties of enabled countries.
  $countries = countries_get_countries('all', array('enabled' => COUNTRIES_ENABLED));

  foreach ($countries as $iso2 => $country) {
    $areas[] = array('id' => $iso2);
  }

  return $areas;
}

/**
 * Displays the countries map page when the user visits the path.
 *
 * @return
 *   String representing the content of the page.
 */
function country_data_map_view() {
  // Adds the amCharts JavaScript files to the page.
  drupal_add_js('http://www.amcharts.com/lib/3/ammap.js', 'external');
  drupal_add_js('http://www.amcharts.com/lib/3/maps/js/worldHigh.js', 'external');
  drupal_add_js('http://www.amcharts.com/lib/3/themes/light.js', 'external');

  // Adds the properties of areas to Drupal's global storage of JavaScript
  // settings.
  drupal_add_js(array('areas' => _country_data_get_areas()), 'setting');

  // Adds the countries map JavaScript file to the page.
  drupal_add_js(drupal_get_path('module', 'country_data') . '/js/countries-map.js');

  return theme('countries_map');
}

/**
 * Loads the alphabetical index of countries.
 *
 * @return
 *   An associative array of countries indexed by first letter.
 */
function _country_data_get_index() {
  $index = array();

  // Loads the names of enabled countries.
  $countries = countries_get_countries('name', array('enabled' => COUNTRIES_ENABLED));

  foreach ($countries as $iso2 => $name) {
    $index[mb_substr($name, 0, 1)][$iso2] = $name;
  }

  return $index;
}

/**
 * Displays the countries list page when the user visits the path.
 *
 * @return
 *   String representing the content of the page.
 */
function country_data_list_view() {
  // Adds the countries list JavaScript file to the page.
  drupal_add_js(drupal_get_path('module', 'country_data') . '/js/countries-list.js');

  return theme('countries_list', array('index' => _country_data_get_index()));
}

/**
 * Registers module's theme implementations.
 *
 * @return
 *   An associative array of theme hook information.
 */
function country_data_theme() {
  return array(
    'country' => array(
      'variables' => array('element' => null),
      'template' => 'templates/country',
    ),
    'countries_list' => array(
      'variables' => array(
        'index' => NULL
      )
    ),
    'countries_map' => array()
  );
}

/**
 * Preprocesses variables for page template.
 *
 * @param $variables
 *   An associative array with generated variables.
 *
 * @return
 *   Nothing.
 */
function country_data_preprocess_page(&$variables) {
  switch (current_path()) {
    case 'countries':
      $variables['theme_hook_suggestions'][] = 'page__countries_map';

      break;

    case 'countries/list':
      $variables['theme_hook_suggestions'][] = 'page__countries_list';

      break;
  }
}

/**
 * @param Entity $entity
 * @param string $view_mode
 * @return array
 */
function country_data_country_page_view($entity, $view_mode = 'full') {
  drupal_set_title(
    t('!country_name profile', array('!country_name' => $entity->label()))
  );
  return country_data_view_multiple(array($entity->cid => $entity), 'full');
}

function country_data_view_multiple($entities, $view_mode, $langcode = NULL) {
  /* @var Entity */
  $entity_type = 'country';
  field_attach_prepare_view($entity_type, $entities, $view_mode, $langcode);
  entity_prepare_view('entity_type', $entities, $langcode);
  $build = array();
  $weight = 0;
  foreach ($entities as $entity) {
    $build[$entity_type][$entity->cid] = country_data_view($entity, $view_mode, $langcode);
    $build[$entity_type][$entity->cid]['#weight'] = $weight;
    $weight++;
  }
  $build[$entity_type]['#sorted'] = TRUE;
  return $build;
}

function country_data_view($entity, $view_mode, $langcode = LANGUAGE_NONE) {
  // Populate $entity->content with a render() array.
  country_data_build_content($entity, $view_mode, $langcode);
  $build = $entity->content;
  // We don't need duplicate rendering info in entity->content.
  unset($entity->content);
  $build += array(
    '#theme' => 'entity',
    '#country' => $entity,
    '#entity' => $entity,
    '#view_mode' => $view_mode,
    '#language' => $langcode,
  );
  return $build;
}

/**
 * @param Entity $entity
 * @param $view_mode
 * @param string $langcode
 */
function country_data_build_content($entity, $view_mode, $langcode = NULL) {
  // Remove previously built content, if exists.
  $entity->content = array();
  // Allow modules to change the view mode.
  $context = array(
    'entity_type' => $entity->entityType(),
    'entity' => $entity,
    'langcode' => $langcode,
  );
  drupal_alter('entity_view_mode', $view_mode, $context);
  // Build fields content. In case of a multiple view, country_view_multiple()
  // already ran the 'prepare_view' step. An internal flag prevents the
  // operation from running twice.
  field_attach_prepare_view('country', array($entity->identifier() => $entity), $view_mode, $langcode);
  entity_prepare_view('country', array($entity->identifier() => $entity), $langcode);
  $entity->content += field_attach_view('country', $entity, $view_mode, $langcode);
}
