<?php

function ws_consumer_cronapi($op, $job = NULL) {
  return array(
    'ws_consumer_update_treaties_ratification' => array(
      'description' => 'Update ratification data every two days',
      'rule' => '0 23 */2 * *', // Every 2 days at 23:00
    )
  );
}

function ws_consumer_update_treaties_ratification() {
  $query = new EntityFieldQuery('entity_type', 'node');
  $result = $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'treaty')
    ->fieldCondition('field_ratification_xml_url', 'url', 'NULL', '!=')
    ->execute();
  if (isset($result['node'])) {
    $result_nids = array_keys($result['node']);
    $treaties = entity_load('node', $result_nids);
    foreach($treaties as $treaty) {
      ws_consumer_update_treaty_ratification($treaty);
    }
  }
}


function ws_consumer_update_treaty_ratification_odata_name($odata_name) {
  $query = new EntityFieldQuery('entity_type', 'node');
  $result = $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'treaty')
    ->fieldCondition('field_ratification_xml_url', 'url', 'NULL', '!=')
    ->fieldCondition('field_odata_identifier', 'value', $odata_name, '=')
    ->execute();
  if (isset($result['node'])) {
    $result_nids = array_keys($result['node']);
    $treaties = entity_load('node', $result_nids);
    $treaty = current($treaties);
    ws_consumer_update_treaty_ratification($treaty);
  } else {
    drupal_set_message('Given treaty does not exist or does not have field_ratification_xml_url data: ' . $odata_name, 'error');
  }
}


function ws_consumer_update_treaty_ratification($node_treaty) {
  $treaty_w = entity_metadata_wrapper('node', $node_treaty);
  $xml_url = $treaty_w->field_ratification_xml_url->value();
  drupal_set_message('Loading XML treaty data from ' . $xml_url['url']);
  if (!empty($xml_url['url'])) {
    $xml_url = $xml_url['url'];
    $data = ws_consumer_service_process_xml($xml_url);
    if (!empty($data->entry_into_force)) {
      $node_treaty->field_entry_into_force[LANGUAGE_NONE][0] = array(
        'value' => date('Y-m-d 16:00:00', $data->entry_into_force),
      );
      node_save($node_treaty);
    }
    foreach ($data->ratification as $ratification) {
      if (!empty($ratification->country_ob)) {
        $country_w = entity_metadata_wrapper('node', $ratification->country_ob->nid);
        $party = ws_consumer_get_party_by_key($treaty_w->getIdentifier(), $country_w->getIdentifier());
        $date1 = strtotime($ratification->date1);
        $date2 = strtotime($ratification->date2);
        $save = FALSE;
        if (!$party) {
          $save = TRUE;
          $party = new stdClass();
          $party->title = $treaty_w->label() . " - " . $country_w->label();
          $party->type = 'member_party';
          node_object_prepare($party);
          $party->language = LANGUAGE_NONE;
          $party->uid = 1;
          $party->status = 1;
          $party->promote = 0;
          $party->comment = 0;
        }
        $party_w = entity_metadata_wrapper('node', $party);
        try {
          if (empty($party->nid)) {
            $party_w->field_country->set(array(intval($ratification->country_ob->nid)));
          }
          if (empty($party->nid)) {
            $party_w->field_treaty->set(array(intval($treaty_w->getIdentifier())));
          }
          if (!empty($date1) && $party_w->field_party_date_1->value() != $date1) {
            $save = TRUE;
            $party_w->field_party_date_1->set(strtotime($ratification->date1));
          }
          if (!empty($date2) && $party_w->field_party_date_2->value() != $date2) {
            $save = TRUE;
            $party_w->field_party_date_2->set(strtotime($ratification->date2));
          }
          if ($status = taxonomy_get_term_by_name($ratification->status, 'party_status')) {
            $status = current($status);
            $current = $party_w->field_party_status->value();
            if (!$current || ($current->tid != $status->tid)) {
              $save = TRUE;
              $party_w->field_party_status->set($status->tid);
            }
          }
          else {
            watchdog(
              'ws_consumer',
              "Cannot set party status: '!status' because term is not in vocabulary 'party status'",
              array('!status' => $ratification->status),
              WATCHDOG_ERROR
            );
          }
          if ($save) {
            $new = empty($party->nid);
            node_save($party);
            watchdog(
              'ws_consumer',
              '!status member party status !title (nid:!nid)',
              array('!status' => $new ? 'New' : 'Updated',  '!title' => $party_w->label(), '!nid' => $party->nid),
              WATCHDOG_INFO
            );
          }
        }
        catch(Exception $e) {
          watchdog_exception(
            'ws_consumer',
            $e,
            "Error updating treaty membership party for pair !title (!cause) \n<pre>!trace</pre>",
            array('!title' => $party_w->label(), '!cause' => $e->getMessage(), '!trace' => $e->getTraceAsString())
          );
        }
      }
    }
  }
}


/**
 * @param string $url URL to the XML
 * @return stdClass Object with data extracted from XML. Fields:
 * - source_url - Original URL
 * - ratification - array with ratification information (keys are country names in English)
 */
function ws_consumer_service_process_xml($url) {
  $ret = new stdClass();
  $ret->source_url = $url;
  $ret->ratification = array();
  $ret->entry_into_force = NULL;
  $response = drupal_http_request($url, array(
    'headers' =>  array('Accept' => 'text/xml'),
  ));
  if (!isset($response->error)) {
    $xml_str = $response->data;
    $xml = simplexml_load_string($xml_str, 'SimpleXMLElement', LIBXML_NOEMPTYTAG);
    if ($xml === FALSE) {

      return FALSE;
    }
    if ($eif = $xml->xpath('//EIF')) {
      if (!empty($eif[0])) {
        $eif = $eif[0];
        $entry_into_force = (string)$eif->Labeltext;
        if (!empty($entry_into_force)) {
          if ($pos = strpos($entry_into_force, ',')) {
            $entry_into_force = substr($entry_into_force, 0, $pos);
          }
          if ($date = DateTime::createFromFormat('d F Y', $entry_into_force)) {
            $ret->entry_into_force = $date->getTimestamp();
          }
        }
      }
    }

    if ($rows = $xml->xpath('//Row')) {
      foreach($rows as $row) {
        $warnings = '';
        $row = $row->children();
        $new_row = array((string)$row[0], (string)$row[1], (string)$row[2]);
        if (!empty($row[3])) {
          $new_row[] = (string)$row[3];
        }
        $row = $new_row;
        $country = $row[0];
        if (!empty($country)) {
          // Remove additional data from country name such as footnote references
          $country = preg_replace('/\<superscript\>.*\<\/superscript\>/', '', $country);
        }
        else {
          $warnings .= 'Could not reliably determine the country name;';
        }

        $date1 = '';
        if (!empty($row[1]) && is_string($row[1])) {
          $parsed = date_parse($row[1]);
          if ($parsed !== FALSE) {
            //@todo: Inspect error_count, errors, warning_count and warnings inside $date1p
            $date1 = date('Y-m-d', mktime(0, 0, 0, $parsed['month'], $parsed['day'], $parsed['year']));
          } else {
            $warnings = sprintf('Canot parse date1: %s', $row[1]);
          }
        } else {
          if (!empty($row[1])) {
            $warnings = 'date1 is not a string. Removed';
          }
        }

        $date2 = '';
        if (!empty($row[2]) && is_string($row[2])) {
          $parsed = date_parse($row[2]);
          if ($parsed !== FALSE) {
            //@todo: Inspect error_count, errors, warning_count and warnings inside $date2p
            $date2 = date('Y-m-d', mktime(0, 0, 0, $parsed['month'], $parsed['day'], $parsed['year']));
          } else {
            $warnings = sprintf('Cannot parse date2: %s', $row[2]);
          }
        } else {
          if (!empty($row[2])) {
            $warnings = 'date2 is not a string. Setting to empty';
          }
        }

        if (!empty($row[3])) {
          $status = strtolower($row[3]);
        } else if(preg_match('/\ a$/', $row[2])) { // a
          $status = 'accession';
        } elseif(preg_match('/\ AA$/', $row[2])) { // AA
          $status = 'approval';
        } elseif(preg_match('/\ A$/', $row[2])) { // A
          $status = 'acceptance';
        } elseif (!empty($date2)) {
          $status = 'ratification';
        } else {
          $status = 'signatory';
        }
        $country_ob = ws_consumer_un_database_get_country($country);
        $ob = new stdClass();
        $ob->country = $country;
        $ob->country_ob = $country_ob;
        $ob->country_verbatim = $row[0];
        $ob->date1 = $date1;
        $ob->date1_verbatim = $row[1];
        $ob->date2 = $date2;
        $ob->date2_verbatim = $row[2];
        $ob->status = $status;
        $ob->warnings = $warnings;
        $ob->errors = array();

        $ret->ratification[] = $ob;
      }
    }
  }
  return $ret;
}


function ws_consumer_get_party_by_key($id_treaty, $id_country) {
  $query = new EntityFieldQuery();
  $query = $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'member_party')
    ->fieldCondition('field_treaty', 'target_id', $id_treaty, '=')
    ->fieldCondition('field_country', 'target_id', $id_country, '=');
  $result = $query->execute();
  if (!empty($result['node'])) {
    return node_load(key($result['node']));
  }
  return FALSE;
}


function ws_consumer_un_database_get_country($country_name) {
  // Some hardcodings for their broken country names
  $fixed_country_name = htmlspecialchars_decode($country_name, ENT_QUOTES);
  $mappings = array(
    'Bolivia' => 'Bolivia (Plurinational State of)',
    'Iran' => 'Iran (Islamic Republic of)',
    'United Kingdom' => 'United Kingdom of Great Britain and Northern Ireland',
    'Gambia' => 'The Gambia',
    'Lao People\'s Democratic Republic' => 'Laos',
    'St. Kitts and Nevis' => 'Saint Kitts and Nevis',
    'St. Lucia' => 'Saint Lucia',
    'St. Vincent and the Grenadines' => 'Saint Vincent and the Grenadines',
    'State of Palestine' => 'Palestinian Territory, Occupied',
    'Lao People&#039;s Democratic Republic' => 'Laos',
    'Sao Tome and Principe' => 'São Tomé and Príncipe',
    'Congo' => 'Congo (Brazzaville)',
    'Holy See' => 'Vatican City State',
  );
  if (array_key_exists($country_name, $mappings)) {
    $fixed_country_name = $mappings[$country_name];
  }
  $country_ob = country_get_by_name($fixed_country_name);
  if (empty($country_ob)) {
    watchdog('ws_consumer', 'Cannot find country: !c', array('!c' => $country_name), WATCHDOG_ERROR);
  }
  return $country_ob;
}
